[{"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does jamaican people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does jamaican people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did james k polk do before he was president", "output": "SELECT DISTINCT ?x\nWHERE {\n  {\n    SELECT ?pFrom \n    WHERE {\n      ns:James K. Polk ns:government.politician.government_positions_held ?y . # James K. Polk\n      ?y ns:government.government_position_held.office_position_or_title ?x ; \n         ns:government.government_position_held.basic_title ns:m.060c4 ; # President\n         ns:government.government_position_held.from ?pFrom .\n    }\n  }\n  ns:James K. Polk ns:government.politician.government_positions_held ?y . # James K. Polk\n  ?y ns:government.government_position_held.office_position_or_title ?x ; \n     ns:government.government_position_held.from ?from .\n  \n  FILTER(xsd:dateTime(?pFrom) - xsd:dateTime(?from) > 0)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays ken barlow in coronation street", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Coronation Street)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Coronation Street ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Ken Barlow .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is jamarcus russell from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:JaMarcus Russell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:JaMarcus Russell ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was george washington carver from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Washington Carver)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Washington Carver ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what else did ben franklin invent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was richard nixon married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Nixon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Nixon ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is governor of ohio 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ohio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ohio ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was vice president after kennedy died", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the fukushima daiichi nuclear plant located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fukushima Daiichi Nuclear Power Plant)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fukushima Daiichi Nuclear Power Plant ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are part of the uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:UK constituent country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is my timezone in louisiana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louisiana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louisiana ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did st augustine do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Augustine of Hippo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Augustine of Hippo ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is keyshia cole dad", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Keyshia Cole)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Keyshia Cole ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind government does egypt have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what town was martin luther king assassinated in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did edgar allan poe died", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Edgar Allan Poe)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Edgar Allan Poe ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do today in atlanta with kids", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Atlanta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Atlanta ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what electorate does anna bligh represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anna Bligh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anna Bligh ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.district_represented ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did andy murray started playing tennis", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andy Murray)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andy Murray ns:tennis.tennis_player.year_turned_pro ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the australian dollar called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australian dollar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australian dollar ns:finance.currency.currency_code ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is sweden", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sweden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sweden ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did cam newton sign with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cam Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cam Newton ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did cam newton sign with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cam Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cam Newton ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:common.topic.notable_types ns:Professional Sports Team .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is frederick md in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Frederick)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Frederick ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is frederick md in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Frederick)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Frederick ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what highschool did harper lee go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harper Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harper Lee ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:High school .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is utah in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did george w. bush run against for the second term", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:m.04qwhs ns:government.election.campaigns ?y .\n\t?y ns:government.election_campaign.candidate ?x .\nFILTER (?x != ns:George W. Bush)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is niall ferguson 's wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Niall Ferguson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Niall Ferguson ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the galapagos islands located on a world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gal\u00e1pagos Islands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gal\u00e1pagos Islands ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the songs that justin bieber wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Justin Bieber)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Justin Bieber ns:music.composer.compositions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did george clemenceau do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Georges Cl\u00e9menceau)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Georges Cl\u00e9menceau ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the state flower of arizona", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arizona)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arizona ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:State flower .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was rihanna born and raised", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rihanna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rihanna ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did president william henry harrison take office", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Henry Harrison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Henry Harrison ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:President of the United States .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where george lopez was born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Lopez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Lopez ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are samsung based", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Samsung Group)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Samsung Group ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did the islamic people believe in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.beliefs ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who will play mr gray in the film", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Christian Grey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Christian Grey ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did george orwell died of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Orwell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Orwell ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did adolf hitler control", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is michael buble", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Bubl\u00e9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Bubl\u00e9 ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is kansas city kansas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas City ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is kansas city kansas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas City ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is kansas city kansas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas Speedway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas Speedway ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did jackie robinson first play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jackie Robinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jackie Robinson ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y ns:sports.sports_team_roster.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did annie open", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Annie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Annie ns:theater.play.date_of_first_performance ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did eleanor roosevelt die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Eleanor Roosevelt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Eleanor Roosevelt ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the religions practiced in indonesia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Indonesia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Indonesia ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was jesse james killed with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jesse James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jesse James ns:people.deceased_person.cause_of_death ?x .\n?x ns:freebase.linguistic_hint.subject_form ?sk0 .\nFILTER (str(?sk0) = \"Firearms\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was vp for lincoln", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham Lincoln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham Lincoln ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other books did charles dickens write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Dickens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Dickens ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the first dictator of the soviet union", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Soviet Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Soviet Union ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency of puerto rico called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Puerto Rico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Puerto Rico ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of cancer did carl wilson have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carl Wilson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carl Wilson ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays the voice of kitt in knight rider", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Knight Rider)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Knight Rider ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n?y ns:tv.regular_tv_appearance.character ns:KITT .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is brentwood tennessee in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brentwood)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brentwood ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is brentwood tennessee in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brentwood)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brentwood ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did michael j fox marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael J. Fox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael J. Fox ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what battles did stonewall jackson fight in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stonewall Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stonewall Jackson ns:military.military_commander.military_commands ?y .\n?y ns:military.military_command.military_conflict ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do the maasai tribe speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Maasai people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Maasai people ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did benjamin franklin get married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Common-law marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what disease did patrick swayze died from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Patrick Swayze)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Patrick Swayze ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what works of art did leonardo da vinci produce", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:visual_art.visual_artist.artworks ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what capital of austria", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Austria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Austria ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of cancer did eva peron have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Eva Per\u00f3n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Eva Per\u00f3n ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did buddha come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gautama Buddha)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gautama Buddha ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is greeley colorado in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greeley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greeley ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is greeley colorado in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greeley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greeley ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did peter tchaikovsky do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pyotr Ilyich Tchaikovsky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pyotr Ilyich Tchaikovsky ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which countries speak german officially", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:German Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:German Language ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:German Language .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of music did john lennon sing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Lennon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Lennon ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the colorado representatives", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colorado)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colorado ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which country does greenland belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greenland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greenland ns:location.administrative_division.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the zip code for seattle washington", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seattle)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seattle ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is willow smith mom name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Willow Smith)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Willow Smith ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do you call the chinese writing system", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chinese language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chinese language ns:language.human_language.writing_system ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played on the jeffersons", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Jeffersons)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Jeffersons ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the san francisco newspaper", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Francisco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Francisco ns:periodicals.newspaper_circulation_area.newspapers ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what continent does armenia belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Armenia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Armenia ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did randy savage died of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Randy Savage)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Randy Savage ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the title of the book charles darwin wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did richard nixon die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Nixon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Nixon ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what songs does smokey robinson sing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Smokey Robinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Smokey Robinson ns:music.artist.track ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was vice president when jfk was president", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is serbian language called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Serbia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Serbia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in haiti today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Haiti)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Haiti ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in haiti today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Haiti)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Haiti ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played barbara gordon batgirl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbara Gordon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbara Gordon ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what basketball teams has shaq played for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shaquille O'Neal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shaquille O'Neal ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.sport ns:Basketball .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is jay leno from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jay Leno)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jay Leno ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from thailand speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thailand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thailand ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from thailand speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thailand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thailand ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did armie hammer play in the social network", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Social Network)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Social Network ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Armie Hammer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was thomas jefferson role in the declaration of independence", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Jefferson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Jefferson ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the book written by charles darwin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the book written by charles darwin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:Book .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did tim tebow play college football for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tim Tebow)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tim Tebow ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.school_sports_team.school ns:University of Florida .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does peyton manning play football for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peyton Manning)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peyton Manning ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the carpathian mountain range located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carpathian Mountains)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carpathian Mountains ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was robert burns", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Burns)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Burns ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did the voice of darth vader in episode 3", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Wars Episode III: Revenge of the Sith .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what super bowl did peyton manning win", "output": "SELECT DISTINCT ?z\nWHERE {\n  ns:Peyton Manning ns:sports.pro_athlete.teams ?y .\n  ?y ns:sports.sports_team_roster.team ?x . #team\n  ?x ns:sports.sports_team.championships ?z . # super bowls\n  ?z ns:common.topic.notable_types ns:m.01xljv1 . #super bowl\n  ?z ns:sports.sports_championship_event.champion ?c .\n  ?z ns:time.event.start_date ?a .\n  \n  # Check the time overlap\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \n             EXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \n             FILTER(xsd:datetime(?sk1) - xsd:datetime(?a) <= 0) })\n\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \n             EXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \n             FILTER(xsd:datetime(?sk3) - xsd:datetime(?a) >= 0 ) }) \n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which country was justin bieber born in", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Justin Bieber ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought in the gulf war 1991", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gulf War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gulf War ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays london tipton in suite life on deck", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Suite Life on Deck)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Suite Life on Deck ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:London Tipton .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did david beckham play for in 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Beckham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Beckham ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did francisco coronado come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Francisco V\u00e1zquez de Coronado)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Francisco V\u00e1zquez de Coronado ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what all does google now do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Google)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Google ns:business.consumer_company.products ?y .\n?y ns:business.company_product_relationship.consumer_product ?x .\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.from_date ?sk0} || \nEXISTS {?y ns:business.company_product_relationship.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.to_date ?sk2} || \nEXISTS {?y ns:business.company_product_relationship.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does egyptian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are abraham sons names", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who wrote the jana gana mana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jana Gana Mana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jana Gana Mana ns:music.composition.composer ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of cancer did gilda radner die of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gilda Radner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gilda Radner ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays juni cortez", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Juni Cortez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Juni Cortez ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was lucille ball", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lucille Ball)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lucille Ball ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who inspired obama", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is michael j fox wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael J. Fox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael J. Fox ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did dolly parton grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dolly Parton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dolly Parton ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of books did agatha christie wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Agatha Christie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Agatha Christie ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the four main languages spoken in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the nra headquarters located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:National Rifle Association)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:National Rifle Association ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is gimli 's father in the hobbit", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gimli)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gimli ns:fictional_universe.fictional_character.parents ?x .\n?x ns:fictional_universe.fictional_character.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who developed the tcp ip reference model", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Transmission Control Protocol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Transmission Control Protocol ns:base.argumentmaps.original_idea.innovator ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who developed the tcp ip reference model", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Transmission Control Protocol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Transmission Control Protocol ns:law.invention.inventor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did albert einstein go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Einstein)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Einstein ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does jordan own", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jordan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jordan ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the state governor of tennessee", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tennessee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tennessee ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do portuguese people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Portugal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Portugal ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does cuba speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cuba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cuba ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does cuba speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cuba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cuba ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the sights to see in madrid", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Madrid)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Madrid ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what instruments did louis armstrong play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Armstrong)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Armstrong ns:music.group_member.instruments_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was george w bush elected", "output": "SELECT DISTINCT ?dt\nWHERE {\n  ?e ns:government.election.winner  ns:George W. Bush ; # George W. Bush\n     ns:government.election.office  ns:President of the United States ; # President of the United States\n     ns:government.election.election_year ?dt  .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone am i in california", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:California)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:California ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mission san buenaventura located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mission San Buenaventura)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mission San Buenaventura ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time in hilo hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hilo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hilo ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did rudolf virchow conduct his research", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rudolf Virchow)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rudolf Virchow ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what university did gordon brown attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gordon Brown)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gordon Brown ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries does greece share borders with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the seahawks win the superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seattle Seahawks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seattle Seahawks ns:sports.sports_team.championships ?x .\n?x ns:time.event.instance_of_recurring_event ns:Super Bowl .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did stephen hawking become famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stephen Hawking)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stephen Hawking ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays donna noble", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Donna Noble)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Donna Noble ns:tv.tv_character.appeared_in_tv_episodes ?y .\n?y ns:tv.tv_guest_role.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays donna noble", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Donna Noble)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Donna Noble ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was dr seuss education", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Lesieg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Lesieg ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did queensland get its name from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Queensland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Queensland ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what document did james madison write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James Madison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James Madison ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the three official languages of belgium", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Belgium)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Belgium ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played bilbo in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Old Bilbo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Old Bilbo ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:The Lord of the Rings .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what airport do you fly into to get to destin fl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Destin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Destin ns:location.location.nearby_airports ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do you call members of the senate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States Senate)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States Senate ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are part of the baltic", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltic states)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltic states ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does colin kaepernick play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colin Kaepernick)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colin Kaepernick ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did joe flacco attend college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joe Flacco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joe Flacco ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is emma stone father", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Emma Stone)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Emma Stone ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was theodore roosevelt buried", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Roosevelt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Roosevelt ns:people.deceased_person.place_of_burial ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the leader of the us during wwii", "output": "SELECT DISTINCT ?x\nWHERE {\n  ns:World War II ns:time.event.start_date ?start ;\n             ns:time.event.end_date ?end .\n  ?x ns:government.politician.government_positions_held  ?y .\n  ?y ns:government.government_position_held.office_position_or_title ns:m.060d2 ; # President of the United States\n     ns:government.government_position_held.from  ?from ;\n     ns:government.government_position_held.to  ?to .\n  FILTER (?from < ?end)\n  FILTER (?to > ?start)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what artistic movement did henri matisse belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henri Matisse)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henri Matisse ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where the missouri river ends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Missouri River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Missouri River ns:geography.river.mouth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of currency do they use in thailand", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thailand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thailand ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is khloe kardashian 's husband", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Khlo\u00e9 Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Khlo\u00e9 Kardashian ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state does romney live in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does france use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who rules denmark right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denmark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denmark ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who rules denmark right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denmark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denmark ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:Queen of Denmark .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did stephen hawking study", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stephen Hawking)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stephen Hawking ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did bristol palin go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bristol Palin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bristol Palin ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what region of the world is egypt associated with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did dr. seuss do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Lesieg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Lesieg ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did drew brees go to college wikianswers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Drew Brees)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Drew Brees ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did ben roethlisberger go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ben Roethlisberger)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ben Roethlisberger ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the iroquois indians come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iroquois)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iroquois ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of guitar did george harrison use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Harrison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Harrison ns:music.guitarist.guitars_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do navajo people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Navajo people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Navajo people ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what places make up new england", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New England ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does iraq have now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iraq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iraq ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the vietnam war location", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vietnam War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vietnam War ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did gerald ford select as his vice president when he became president", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gerald Ford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gerald Ford ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency used in italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of modern egypt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did sir ernest rutherford go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ernest Rutherford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ernest Rutherford ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what position does brandon roy play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brandon Roy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brandon Roy ns:basketball.basketball_player.position_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is harvard university", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harvard University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harvard University ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is harvard university", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harvard University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harvard University ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.state_province_region ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is laos in world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laos)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laos ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tyrese gibson from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tyrese Gibson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tyrese Gibson ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are near italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which states does the colorado river run through", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colorado River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colorado River ns:location.location.partially_containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did scarlett johansson date", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scarlett Johansson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scarlett Johansson ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did scarlett johansson date", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scarlett Johansson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scarlett Johansson ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which continents were part of the roman empire", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Roman Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Roman Empire ns:location.location.partially_contained_by ?y .\n?y ns:location.partial_containment_relationship.partially_contained_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was elvis costello born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elvis Costello)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elvis Costello ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the gobi desert located on a map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gobi Desert)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gobi Desert ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does the us follow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "in which continent is germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language turkey people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language turkey people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does jeremy lin play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jeremy Lin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jeremy Lin ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the seychelles on world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seychelles)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seychelles ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the seychelles on world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seychelles)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seychelles ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did william morris go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Morris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Morris ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state is mount st. helens in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mount St. Helens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mount St. Helens ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is jimmy savile", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jimmy Savile)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jimmy Savile ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where were the seneca indians located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seneca people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seneca people ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did florida marlins join mlb", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miami Marlins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miami Marlins ns:baseball.baseball_team.team_stats ?y .\n?y ns:baseball.baseball_team_stats.season ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries have spanish as the national language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spanish Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spanish Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to see in phoenix arizona", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Phoenix)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Phoenix ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries does the panama canal go through", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Panama Canal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Panama Canal ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is charlie chaplin famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charlie Chaplin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charlie Chaplin ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did fred durst do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fred Durst)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fred Durst ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did the chargers draft in 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Diego Chargers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Diego Chargers ns:sports.professional_sports_team.draft_picks ?y .\n?y ns:sports.sports_league_draft_pick.player ?x .\n?y ns:sports.sports_league_draft_pick.draft ns:2011 NFL draft .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do american bulldogs originate from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American Bulldog)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American Bulldog ns:biology.animal_breed.place_of_origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what colleges did albert einstein teach at", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Einstein)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Einstein ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays the voice of brian on family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Family Guy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Family Guy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Brian Griffin .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did george w bush live as a child", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George W. Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George W. Bush ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was the first miss america pageant held", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miss America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miss America ns:time.recurring_event.date_of_first_occurance ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was nikola tesla inventions", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nikola Tesla)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nikola Tesla ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did flemish people come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Flemish people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Flemish people ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state new york city belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:base.biblioness.bibs_location.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the cause of death for bruce lee", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bruce Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bruce Lee ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does usa follow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of currency do they use in england", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:England ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was benjamin franklin educated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries included in the uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:UK constituent country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries in the world speak chinese", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chinese language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chinese language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where obama went to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the primary language of china", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the soviet leader during world war ii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Soviet Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Soviet Union ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?x ns:military.military_person.participated_in_conflicts ns:World War II .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which of the following does australia export the most", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.statistical_region.major_exports ?y .\n?y ns:location.imports_exports_by_industry.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the city of david", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:City of David)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:City of David ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is cindy sherman known for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cindy Sherman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cindy Sherman ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what tv shows did shawnee smith play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shawnee Smith)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shawnee Smith ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does australia use for currency", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which airport to fly into rome", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rome)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rome ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?x ns:common.topic.notable_types ns:Airport .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is there to do for fun in kansas city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas City ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was martin luther king jr raised", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was lebron james rookie season", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:LeBron James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:LeBron James ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:NBA Rookie of the Year Award .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does delaware river start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Delaware River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Delaware River ns:geography.river.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of monarchy does japan have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did mitt romney 's parents come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did michael jordan return to the nba", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jordan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jordan ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.career_start ?x .\n?y ns:sports.pro_sports_played.sport ns:Basketball .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was mission san rafael located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mission San Rafael Arc\u00e1ngel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mission San Rafael Arc\u00e1ngel ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was esther 's husband", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Esther)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Esther ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who 's dating claire danes", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Claire Danes)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Claire Danes ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n?y ns:celebrities.romantic_relationship.relationship_type ns:Dated .\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk0} || \nEXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk2} || \nEXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st paul va in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Paul ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of sports do japanese play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which countries share a border with russia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the latin language originate from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Latin Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Latin Language ns:language.human_language.language_family ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did karl benz go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Karl Benz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Karl Benz ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies has carmen electra been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carmen Electra)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carmen Electra ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when do world war ii end", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:World War II)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:World War II ns:time.event.end_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did morgan freeman graduate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morgan Freeman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morgan Freeman ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was carolus linnaeus", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carl Linnaeus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carl Linnaeus ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does germany have now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does libya have today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Libya)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Libya ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is anaheim california", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anaheim)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anaheim ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the orioles go to the world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Orioles)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Orioles ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is sir francis bacon", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Francis Bacon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Francis Bacon ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what were amelia earhart 's achievements", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Amelia Earhart)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Amelia Earhart ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the official colors of the dallas cowboys", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dallas Cowboys)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dallas Cowboys ns:sports.sports_team.colors ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did margaret hoover go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Margaret Hoover)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Margaret Hoover ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is jamie oliver children names", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamie Oliver)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamie Oliver ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does bradley walsh live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bradley Walsh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bradley Walsh ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the head coach of inter milan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Inter Milan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Inter Milan ns:sports.sports_team.coaches ?y .\n?y ns:sports.sports_team_coach_tenure.coach ?x .\n?y ns:sports.sports_team_coach_tenure.position ns:Head coach .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_coach_tenure.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_coach_tenure.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_coach_tenure.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_coach_tenure.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did reese witherspoon get married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Reese Witherspoon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Reese Witherspoon ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of money should i take to costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the ufc headquarters", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ultimate Fighting Championship)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ultimate Fighting Championship ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays captain kirk in star trek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does albert pujols play for 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Pujols)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Pujols ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government is sweden", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sweden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sweden ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was country singer george jones born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Jones)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Jones ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did shakespeare become famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does russia import from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does russia import from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ukraine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ukraine ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the money of switzerland called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people in australia speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has ian somerhalder acted in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ian Somerhalder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ian Somerhalder ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did ron howard director", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ron Howard)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ron Howard ns:film.director.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did gerald r ford die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gerald Ford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gerald Ford ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what two continents is turkey on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what two continents is turkey on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.location.partially_containedby ?x .\n?x ns:common.topic.notable_types ns:Continent .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kevin love go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kevin Love)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kevin Love ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government was formed when italy unified", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the temple of karnak built", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Karnak)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Karnak ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did morgan freeman star in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morgan Freeman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morgan Freeman ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did john kennedy have affairs with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of money to take to cuba", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cuba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cuba ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency should you take to morocco", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morocco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morocco ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is mary mcleod bethune for kids", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary McLeod Bethune)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary McLeod Bethune ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do they call money in japan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what nationality is mother teresa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mother Teresa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mother Teresa ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is richard pryor son", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Pryor)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Pryor ns:people.person.children ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries share borders with spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries have english as their official language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:English Language .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what international organizations is china part of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:organization.organization_member.member_of ?y .\n?y ns:organization.organization_membership.organization ?x .\nFILTER(NOT EXISTS {?y ns:organization.organization_membership.to ?sk0} || \nEXISTS {?y ns:organization.organization_membership.to ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.organization_membership.from ?sk2} || \nEXISTS {?y ns:organization.organization_membership.from ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is west st paul in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:West St. Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:West St. Paul ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is west st paul in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:West St. Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:West St. Paul ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does donnie wahlberg play in the sixth sense", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Donnie Wahlberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Donnie Wahlberg ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:The Sixth Sense .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does donnie wahlberg play in the sixth sense", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Sixth Sense)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Sixth Sense ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Donnie Wahlberg .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did baron de montesquie influence", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Montesquieu)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Montesquieu ns:influence.influence_node.influenced ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did carlos boozer play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carlos Boozer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carlos Boozer ns:basketball.basketball_player.player_statistics ?y .\n?y ns:basketball.basketball_player_stats.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who owns the portland press herald", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Portland Press Herald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Portland Press Herald ns:book.newspaper.owner ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did albert speer design", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Speer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Speer ns:architecture.architect.structures_designed ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does jordan palmer play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jordan Palmer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jordan Palmer ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what art movement did leonardo da vinci belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what airport is near arlington tx", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arlington)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arlington ns:location.location.nearby_airports ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does heskey play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Emile Heskey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Emile Heskey ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did emperor hirohito live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hirohito)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hirohito ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do and see in vienna austria", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vienna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vienna ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did conflict start in ireland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ireland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ireland ns:location.location.events ?x .\n?x ns:common.topic.notable_types ns:Military Conflict .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is there to do in peoria illinois", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peoria ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do british speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do british speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what makes elvis presley famous", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elvis Presley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elvis Presley ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in the netherlands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Netherlands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Netherlands ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in the netherlands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Netherlands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Netherlands ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the major languages spoken in greece", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of artist is henri matisse", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henri Matisse)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henri Matisse ns:visual_art.visual_artist.art_forms ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the first book charles dickens wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Dickens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Dickens ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:Book .\n?x ns:book.written_work.copyright_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books did agatha christie wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Agatha Christie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Agatha Christie ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did michael jordan attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jordan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jordan ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year does hitler die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:people.deceased_person.date_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mount st helens volcano", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mount St. Helens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mount St. Helens ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what shows are shot in new york", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:tv.tv_location.tv_shows_filmed_here ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what book did tupac write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tupac Shakur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tupac Shakur ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do chinese people write in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chinese language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chinese language ns:language.human_language.writing_system ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was robert burns famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Burns)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Burns ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did william mckinley died", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William McKinley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William McKinley ns:people.deceased_person.date_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how deep is lake merritt oakland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lake Merritt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lake Merritt ns:geography.body_of_water.depth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the important holidays of islam", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.holidays ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of music did claude debussy play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Claude Debussy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Claude Debussy ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the toronto maple leafs were in the stanley cup finals", "output": "SELECT DISTINCT ?x\nWHERE {\n  ?x ns:sports.sports_championship_event.championship ns:m.0hn79\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.0j6tr . # Toronto Maple Leafs\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.0j6tr . # Toronto Maple Leafs\n  }\n  ?x ns:time.event.start_date ?st .\n}\nORDER BY DESC(xsd:datetime(?st))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team is hank baskett on 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hank Baskett)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hank Baskett ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the two official languages of paraguay", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paraguay)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paraguay ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state is the steelers from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pittsburgh Steelers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pittsburgh Steelers ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did sir isaac newton go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the school colors for harvard university", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harvard University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harvard University ns:education.educational_institution.colors ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the university of the rockies located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:University of the Rockies)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:University of the Rockies ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the university of the rockies located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:University of the Rockies)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:University of the Rockies ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the university of the rockies located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:University of the Rockies)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:University of the Rockies ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.state_province_region ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what disease does robin roberts have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Roberts)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Roberts ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the capital city of the east roman empire", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Byzantine Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Byzantine Empire ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays edward scissorhands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Edward Scissorhands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Edward Scissorhands ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Edward Scissorhands .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does joey jordison play in slipknot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joey Jordison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joey Jordison ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:Slipknot .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does joey jordison play in slipknot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Slipknot)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Slipknot ns:music.musical_group.member ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.member ns:Joey Jordison .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does turkey speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does turkey speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was lebron james first team", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:LeBron James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:LeBron James ns:basketball.basketball_player.player_statistics ?y .\n?y ns:basketball.basketball_player_stats.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was lebron james first team", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:LeBron James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:LeBron James ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought the battle of gettysburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Gettysburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Gettysburg ns:base.culturalevent.event.entity_involved ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought the battle of gettysburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Gettysburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Gettysburg ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought the battle of gettysburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Gettysburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Gettysburg ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_combatant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the coach of the sf giants", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Francisco Giants)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Francisco Giants ns:baseball.baseball_team.current_coaches ?y .\n?y ns:baseball.current_coaching_tenure.baseball_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the first president of the afl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American Football League)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American Football League ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did giuliana rancic grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Giuliana Rancic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Giuliana Rancic ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the major cities in ukraine", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ukraine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ukraine ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does brian dawkins play for 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brian Dawkins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brian Dawkins ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did tupac star in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tupac Shakur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tupac Shakur ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of currency does china have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays kenneth", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kenneth Parcell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kenneth Parcell ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what league are the indianapolis colts in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Indianapolis Colts)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Indianapolis Colts ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did magellan represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ferdinand Magellan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ferdinand Magellan ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is perpignan located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Perpignan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Perpignan ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did kim richards marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kim Richards)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kim Richards ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what happened in bosnia in the 90s", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bosnia and Herzegovina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bosnia and Herzegovina ns:location.location.events ?x .\nFILTER(NOT EXISTS {?x ns:time.event.start_date ?sk0} || \nEXISTS {?x ns:time.event.start_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:time.event.end_date ?sk2} || \nEXISTS {?x ns:time.event.end_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when 's the last time the steelers won the superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pittsburgh Steelers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pittsburgh Steelers ns:sports.sports_team.championships ?x .\n?x ns:common.topic.notable_types ns:Super bowl .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where english is spoken", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where english is spoken", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is giza pyramids located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Giza Necropolis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Giza Necropolis ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for midland tx", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Midland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Midland ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what states make up the midwest us", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Midwestern United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Midwestern United States ns:location.location.contains ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what instruments does justin bieber use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Justin Bieber)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Justin Bieber ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does australians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did annie oakley married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Annie Oakley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Annie Oakley ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has played lex luthor", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alexander Luthor)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alexander Luthor ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the zambezi river start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Zambezi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Zambezi ns:geography.river.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the nigeria time", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nigeria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nigeria ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did they find jenni rivera 's body", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jenni Rivera)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jenni Rivera ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what university did romney graduated from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:Bachelor of Arts .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the time zone line in south dakota", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Dakota)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Dakota ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is jason mraz from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jason Mraz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jason Mraz ns:music.artist.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is jason mraz from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jason Mraz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jason Mraz ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what killed john bonham", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Bonham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Bonham ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what industry does walmart operate in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Walmart)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Walmart ns:business.business_operation.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is texarkana arkansas in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texarkana, Arkansas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texarkana, Arkansas ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is texarkana arkansas in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texarkana, Arkansas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texarkana, Arkansas ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what music period did beethoven live in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ludwig van Beethoven)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ludwig van Beethoven ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did laura ingalls wilder wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laura Ingalls Wilder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laura Ingalls Wilder ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did laura ingalls wilder wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laura Ingalls Wilder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laura Ingalls Wilder ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government system does italy have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did john irving wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Irving)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Irving ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the national flower of hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:State flower .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did alice paul accomplish", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alice Stokes Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alice Stokes Paul ns:common.topic.notable_types ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what languages do they speak in costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what languages do they speak in costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did hank marvin come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hank Marvin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hank Marvin ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did chipper jones get drafted", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chipper Jones)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chipper Jones ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part did winona ryder play in star trek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Winona Ryder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Winona Ryder ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Star Trek .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part did winona ryder play in star trek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Star Trek)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Star Trek ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Winona Ryder .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did jovan belcher kill himself", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jovan Belcher)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jovan Belcher ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did clay matthews go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Clay Matthews III)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Clay Matthews III ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time is it in texas houston right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is princess leia in star wars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leia Organa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leia Organa ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Wars .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the political structure of china", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is new york city airport", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:Air travel .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language brazil speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language brazil speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played obi wan in episode 2", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Obi-Wan Kenobi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Obi-Wan Kenobi ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Wars Episode II: Attack of the Clones .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did venus williams come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Venus Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Venus Williams ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency is used in panama", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Panama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Panama ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the zambezi river originate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Zambezi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Zambezi ns:geography.river.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did ronaldo play for in 2003", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ronaldo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ronaldo ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does robin williams live 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Williams ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played jacob black in twilight", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Twilight)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Twilight ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Jacob Black .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played jacob black in twilight", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jacob Black)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jacob Black ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was president john adams elected", "output": "SELECT DISTINCT ?dt\nWHERE {\n  ?e ns:government.election.winner  ns:John Adams ; # John Adams\n     ns:government.election.office  ns:m.060d2 ; # President of the United States\n     ns:government.election.election_year ?dt  .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which airport to fly into in buenos aires", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Buenos Aires)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Buenos Aires ns:location.location.nearby_airports ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did adrian peterson play for in college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adrian Peterson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adrian Peterson ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.school ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does name pennsylvania come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of money do they use in germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays blaine in batman", "output": "SELECT DISTINCT ?x\nWHERE {\n\t{ \n\tns:m.0321b4 ns:film.film_character.portrayed_in_films ?y .\n\t?y ns:film.performance.actor ?x .\n\t}\n\tUNION\n\t{\n\tns:m.0321b4 ns:tv.tv_character.appeared_in_tv_program ?y .\n\t?y ns:tv.regular_tv_appearance.actor ?x .\n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does australia use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did veronica lake mary", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Veronica Lake)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Veronica Lake ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did sir francis drake marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Francis Drake)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Francis Drake ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays stephanie plum in one for the money", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:One for the Money)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:One for the Money ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Stephanie Plum .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did the ancient romans speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Roman Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Roman Empire ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does ringo sing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ringo Starr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ringo Starr ns:music.artist.track ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was st. lucy born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Lucy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Lucy ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was st. lucy born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Lucy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Lucy ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does australia have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the father of king george vi", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George VI)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George VI ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for trenton", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Trenton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Trenton ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has ashley greene been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ashley Greene)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ashley Greene ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did al qaeda attack", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Al-Qaeda)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Al-Qaeda ns:base.disaster2.attacker.attack_s ?y .\n?y ns:base.disaster2.attack_process.attack_event ?x .\n?y ns:base.disaster2.attack_process.attacker ns:Al-Qaeda .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was philip in acts chapter 8", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Philip the Apostle)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Philip the Apostle ns:fictional_universe.person_in_fiction.representations_in_fiction ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the time zone in england", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:England ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the best currency to take to turkey", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what system of government is practiced in nigeria", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nigeria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nigeria ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were mary shelley", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary Shelley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary Shelley ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do most australians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is denmark situated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denmark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denmark ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was teddy roosevelt 's house", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Roosevelt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Roosevelt ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the government system of malaysia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malaysia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malaysia ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in canada", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in canada", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of money do they use in costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is nashville tn", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nashville)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nashville ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was anakin skywalker", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anakin Skywalker)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anakin Skywalker ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did adolf hitler die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the largest nation in europe", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Europe)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Europe ns:base.locations.continents.countries_within ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the first gulf war fought", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gulf War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gulf War ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the senators of virginia 2013", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Virginia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Virginia ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:United States Senate .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what band was george clinton in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Clinton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Clinton ns:music.group_member.membership ?y .\n?y ns:music.group_membership.group ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country borders slovakia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Slovakia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Slovakia ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was james garfield most known for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James A. Garfield)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James A. Garfield ns:common.topic.notable_for ?y .\n?y ns:common.notable_for.object ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did paula deen go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paula Deen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paula Deen ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does robert irvine come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Irvine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Irvine ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what style of music does michael jackson perform", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does david beckham play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Beckham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Beckham ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.sport ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does julian lennon do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Julian Lennon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Julian Lennon ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the milwaukee brewers mascot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Milwaukee Brewers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Milwaukee Brewers ns:sports.sports_team.team_mascot ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the second biggest state in the united states", "output": "SELECT DISTINCT ?x\nWHERE {\n                ns:United States of America ns:base.aareas.schema.administrative_area.administrative_children ?x .\n                ?x ns:common.topic.notable_types ns:US State .  # US State\n                ?x ns:location.location.area ?y .\n}\nORDER BY DESC(xsd:float(?y))\nLIMIT 1\nOFFSET 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has charlie hunnam been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charlie Hunnam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charlie Hunnam ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are all the movies taylor swift has been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taylor Swift)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taylor Swift ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did brett favre", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brett Favre)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brett Favre ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did alex chilton die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alex Chilton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alex Chilton ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did martin luther king jr go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of cancer did farrah fawcett die of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Farrah Fawcett)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Farrah Fawcett ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is michael j fox 's wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael J. Fox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael J. Fox ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what money do i use in costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what guitar did joe walsh play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joe Walsh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joe Walsh ns:music.guitarist.guitars_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the official languages of the eu", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:European Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:European Union ns:user.ktrueman.default_domain.international_organization.official_language_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is ryan seacrest radio show", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ryan Seacrest)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ryan Seacrest ns:broadcast.artist.content ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do most italians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what money do they use in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did drew barrymore go to rehab for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Drew Barrymore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Drew Barrymore ns:celebrities.celebrity.substance_abuse_problems ?y .\n?y ns:celebrities.substance_abuse_problem.substance ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when is saint george day celebrated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St George's Day)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St George's Day ns:time.holiday.day_of_year ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what government did the roman empire have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Roman Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Roman Empire ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what instrument did robin gibb play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Gibb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Gibb ns:music.group_member.instruments_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what instrument did robin gibb play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Gibb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Gibb ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?x ns:common.topic.notable_types ns:Musical instrument .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who voiced darth vader", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was abe lincoln president", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham Lincoln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham Lincoln ns:base.inaugurations.inauguration_speaker.inauguration ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the texas rangers playing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texas Rangers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texas Rangers ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is arkansas state capitol", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arkansas State Capitol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arkansas State Capitol ns:location.location.street_address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for nogales az", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nogales)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nogales ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did michael vick start playing for the eagles", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Vick)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Vick ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.from ?x .\n?y ns:sports.sports_team_roster.team ns:Philadelphia Eagles .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is william taft famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Howard Taft)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Howard Taft ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did robin cook die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Cook)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Cook ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did melba beals live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Melba Pattillo Beals)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Melba Pattillo Beals ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is louisiana state senator", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louisiana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louisiana ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:United States Senator .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the 7 countries that are part of central america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Central America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Central America ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did derek fisher go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Derek Fisher)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Derek Fisher ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was kobe bryant drafted by", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kobe Bryant)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kobe Bryant ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the new orleans hornets moving to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charlotte Hornets)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charlotte Hornets ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does algerian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Algeria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Algeria ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does algerian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Algeria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Algeria ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was anne boleyn executed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anne Boleyn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anne Boleyn ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did galileo do to become famous", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Galileo Galilei)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Galileo Galilei ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did martin luther king jr received his doctorate degree from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:PhD .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where buddha come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gautama Buddha)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gautama Buddha ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did king henry viii rule", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henry VIII of England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henry VIII of England ns:royalty.monarch.kingdom ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of cancer did larry hagman have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Larry Hagman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Larry Hagman ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what wars did robert e lee served in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert E. Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert E. Lee ns:military.military_commander.military_commands ?y .\n?y ns:military.military_command.military_conflict ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what wars did robert e lee served in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert E. Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert E. Lee ns:military.military_person.participated_in_conflicts ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what russian language called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is in charge of libya now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Libya)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Libya ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:Prime Minister of Libya .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did shays rebellion start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shays' Rebellion)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shays' Rebellion ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of disease does montel williams have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Montel Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Montel Williams ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when is the last time the ravens won a superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Ravens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Ravens ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:Super Bowl .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kansas city royals come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas City Royals)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas City Royals ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what style of music does john mayer play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Mayer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Mayer ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what inventions did thomas edison invent list", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Edison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Edison ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did djokovic come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Novak Djokovic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Novak Djokovic ns:olympics.olympic_athlete.country ?y .\n?y ns:olympics.olympic_athlete_affiliation.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did djokovic come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Novak Djokovic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Novak Djokovic ns:olympics.olympic_athlete.medals_won ?y .\n?y ns:olympics.olympic_medal_honor.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did djokovic come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Novak Djokovic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Novak Djokovic ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part of the country is new england", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New England ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what money to take to turkey", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of music did jimi hendrix play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jimi Hendrix)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jimi Hendrix ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what degrees did obama get in college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were alexander graham bell 's siblings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alexander Graham Bell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alexander Graham Bell ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did liverpool fc last win the champions league", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Liverpool F.C.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Liverpool F.C. ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:Football League Cup .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played jeannie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:I Dream of Jeannie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:I Dream of Jeannie ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Jeannie .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was st peter killed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Peter)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Peter ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does jeremy shockey play for in 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jeremy Shockey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jeremy Shockey ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did deion sanders jr go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Deion Sanders)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Deion Sanders ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the battle of alamo start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of the Alamo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of the Alamo ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what were the names of henry viii 's three children", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henry VIII of England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henry VIII of England ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was queen elizabeth ii childhood nickname", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elizabeth II)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elizabeth II ns:base.schemastaging.context_name.nickname ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did tim tebow grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tim Tebow)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tim Tebow ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is chesapeake bay bridge", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chesapeake Bay Bridge)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chesapeake Bay Bridge ns:transportation.bridge.locale ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played victoria barkley", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Big Valley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Big Valley ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Victoria Barkley .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kennedy 's inaugural address take place", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:m.05br2y1 ns:time.event.locations ?x .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries have german as the official language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:German Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:German Language ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:German Language .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the taliban began", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taliban)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taliban ns:organization.organization.geographic_scope ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays elena gilbert on vampire diaries", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elena Gilbert)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elena Gilbert ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:The Vampire Diaries .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does the missouri river bisect", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Missouri River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Missouri River ns:location.location.partially_contained_by ?y .\n?y ns:location.partial_containment_relationship.partially_contained_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what nationality is taylor lautner jacob black", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taylor Lautner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taylor Lautner ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what animal represents california", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:California)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:California ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:State animal .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what company does nike own", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nike, Inc.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nike, Inc. ns:organization.organization.child ?y .\n?y ns:organization.organization_relationship.child ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do colombian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do colombian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did ray allen join the nba", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ray Allen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ray Allen ns:sports.pro_athlete.career_start ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is claire danes famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Claire Danes)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Claire Danes ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is san antonio in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Antonio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Antonio ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is san antonio in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Antonio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Antonio ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what characters does matt stone do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Matt Stone)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Matt Stone ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is the state of michigan and", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michigan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michigan ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government did soviet union have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Soviet Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Soviet Union ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what languages are there in japan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the bulls get rodman", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dennis Rodman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dennis Rodman ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.from ?x .\n?y ns:sports.sports_team_roster.team ns:Chicago Bulls .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was saint paul the apostle", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paul the Apostle)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paul the Apostle ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did vince scully go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vin Scully)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vin Scully ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does princess leia live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leia Organa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leia Organa ns:fictional_universe.fictional_character.places_lived ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what famous people are from el salvador", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:El Salvador)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:El Salvador ns:location.location.people_born_here ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art did leonardo da vinci make", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:visual_art.visual_artist.art_forms ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did mary bell live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary Bell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary Bell ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did kimberly williams marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kimberly Williams-Paisley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kimberly Williams-Paisley ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other movies has ryan gosling been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ryan Gosling)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ryan Gosling ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political party does julia gillard belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Julia Gillard)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Julia Gillard ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency of germany now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of hispanic is selena gomez", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Selena Gomez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Selena Gomez ns:people.person.ethnicity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did denise van outen married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denise van Outen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denise van Outen ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are egyptian money called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for wyoming michigan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wyoming)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wyoming ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the president of costa rica in 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:President .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did martin luther king got shot at", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who wrote the gospel according to john", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gospel of John)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gospel of John ns:book.written_work.author ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government is the uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did nasri play for before arsenal", "output": "SELECT DISTINCT ?x\nWHERE {\nfilter(?x != ns:m.0xbm)\nns:Samir Nasri ns:sports.pro_athlete.teams ?z . #Samir Nasri\n?z ns:sports.sports_team_roster.team ns:m.0xbm  . #arsenal\n?z ns:sports.sports_team_roster.from ?from .\nns:Samir Nasri ns:sports.pro_athlete.teams ?y . #Samir Nasri\n?y ns:sports.sports_team_roster.team ?x .\n?y  ns:sports.sports_team_roster.to ?to .\nFILTER (xsd:dateTime(?from) - xsd:dateTime(?to) >= 0)\n}\nORDER BY Desc(xsd:datetime(?from))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does the czech republic use now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Czech Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Czech Republic ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what age did william penn get married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Penn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Penn ns:people.person.spouse_s ?y .\n?y ns:people.marriage.from ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was firefox programmed in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Firefox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Firefox ns:computer.software.languages_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what government does new zealand have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New Zealand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New Zealand ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is isthmus of panama located on the map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isthmus of Panama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isthmus of Panama ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of republic of ireland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Republic of Ireland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Republic of Ireland ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has kristen stewart acted in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kristen Stewart)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kristen Stewart ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did dr josef mengele do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Josef Mengele)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Josef Mengele ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does egypt speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the senators of hawaii 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.jurisdiction_of_office ns:United States of America .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government does north korea have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North Korea)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North Korea ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did robert kardashian go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Kardashian ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st james city fl in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. James City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. James City ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st james city fl in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. James City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. James City ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did the akkadian empire include", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Akkadian Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Akkadian Empire ns:location.location.contains ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "after how many years are the olympic games held", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Olympic Games)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Olympic Games ns:time.recurring_event.current_frequency ?x .\n?x ns:freebase.unit_profile.dimension ns:Time .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what system of government does guyana have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Guyana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Guyana ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did aguero play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sergio Ag\u00fcero)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sergio Ag\u00fcero ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the president of the european union 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:European Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:European Union ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:President of the European Parliament .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was kenya moore crowned miss usa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miss USA)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miss USA ns:time.recurring_event.instances ?x .\n?x ns:award.competition.winner ns:Kenya Moore .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sort of government does nigeria have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nigeria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nigeria ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does chef ina garten live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ina Garten)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ina Garten ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when the atlanta braves won the world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Atlanta Braves)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Atlanta Braves ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language do they speak in iran", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iran)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iran ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language do they speak in iran", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iran)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iran ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the first language spoken in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did scott joplin play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scott Joplin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scott Joplin ns:music.group_member.instruments_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did miley cyrus", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miley Cyrus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miley Cyrus ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do most people speak in afghanistan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Afghanistan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Afghanistan ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do most people speak in afghanistan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Afghanistan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Afghanistan ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the prime minister of jamaica west indies", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Prime Minister of Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Prime Minister of Jamaica ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Prime minister .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what role did paul mccartney play in the beatles", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paul McCartney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paul McCartney ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:The Beatles .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did juventus win the champions league", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Juventus F.C.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Juventus F.C. ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:UEFA Champions League Final .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is robin roberts father", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Roberts)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Roberts ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of australia victoria state", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Victoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Victoria ns:base.aareas.schema.administrative_area.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of australia victoria state", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Victoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Victoria ns:location.administrative_division.capital ?y .\n?y ns:location.administrative_division_capital_relationship.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of australia victoria state", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Victoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Victoria ns:location.australian_state.capital_city ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is french spoken most", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:French)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:French ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team is reggie bush on 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Reggie Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Reggie Bush ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what highschool did emily osment go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Emily Osment)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Emily Osment ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:base.schemastaging.non_profit_extra.classification ns:Secondary/High School .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency should i take to mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is thor heyerdahl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thor Heyerdahl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thor Heyerdahl ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did troy aikman play football", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Troy Aikman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Troy Aikman ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played cletus hogg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cletus Hogg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cletus Hogg ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won fa cup 1976", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:FA Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:FA Cup ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:1975\u201376 FA Cup .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did general robert e lee die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert E. Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert E. Lee ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what style of art did henri matisse do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henri Matisse)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henri Matisse ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays chuck bass in gossip girl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chuck Bass)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chuck Bass ns:base.gossipgirl.character.played_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays chuck bass in gossip girl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gossip Girl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gossip Girl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Chuck Bass .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries have territories in oceania", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Oceania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Oceania ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st. louis park in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Louis Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Louis Park ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st. louis park in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Louis Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Louis Park ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the political system of south africa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Africa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Africa ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language group does germany belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:German Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:German Language ns:language.human_language.language_family ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is tucson arizona in right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tucson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tucson ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was lucy lawless born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lucy Lawless)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lucy Lawless ns:people.person.date_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which political party does barack obama represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of leukemia did jill clayburgh have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jill Clayburgh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jill Clayburgh ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the book hitler wrote in jail", "output": "SELECT DISTINCT  ?x\nWHERE {\n  ns:Adolf Hitler ns:book.book_subject.works ?x .\n  ?x ns:book.written_work.date_written ?d .\n\n  ns:Adolf Hitler ns:base.prison.prisoner.imprisoned ?y .\n  ?y          ns:base.prison.imprisonment.from ?from ;\n              ns:base.prison.imprisonment.to ?to .\n  FILTER (xsd:dateTime(?d) - xsd:dateTime(?from) >= 0)\n  FILTER (xsd:dateTime(?to) - xsd:dateTime(?d) >= 0)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is there to see in sydney australia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sydney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sydney ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was marilyn monroe found dead", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marilyn Monroe)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marilyn Monroe ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what states does the sierra nevada run through", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sierra Nevada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sierra Nevada ns:location.location.partially_containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in greek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in greek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the speaker of the house of representatives now 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Speaker of the United States House of Representatives)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Speaker of the United States House of Representatives ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays stanley hudson", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stanley Hudson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stanley Hudson ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what record label is kelly clarkson signed with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kelly Clarkson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kelly Clarkson ns:music.artist.label ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does tim roth come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tim Roth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tim Roth ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency should you take to vietnam", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vietnam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vietnam ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did roger federer married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Roger Federer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Roger Federer ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of money do i need in costa rica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Costa Rica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Costa Rica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the capital of belgium", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Belgium)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Belgium ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does japan have now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what pieces of music did claude debussy compose", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Claude Debussy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Claude Debussy ns:music.composer.compositions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Selena Gomez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Selena Gomez ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:Barney & Friends - Season 7 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Selena Gomez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Selena Gomez ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:Barney & Friends - Season 8 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Selena Gomez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Selena Gomez ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.series ns:Barney & Friends .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barney & Friends)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barney & Friends ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:Selena Gomez .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barney & Friends)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barney & Friends ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:Barney & Friends - Season 7 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was selena gomez in barney and friends", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barney & Friends)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barney & Friends ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:Barney & Friends - Season 8 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays caesar flickerman in the hunger games", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Hunger Games)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Hunger Games ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Caesar Flickerman .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the gettysburg address", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gettysburg Address)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gettysburg Address ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the name of jfk 's brothers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was tupac signed to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tupac Shakur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tupac Shakur ns:music.artist.label ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was augustus caesar famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Augustus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Augustus ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does colombia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does colombia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for schenectady new york", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Schenectady)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Schenectady ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was president in 1988 in the united states", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:President of the United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:President of the United States ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who owns google 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Google)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Google ns:organization.organization.leadership ?y .\n?y ns:organization.leadership.person ?x .\nFILTER(NOT EXISTS {?y ns:organization.leadership.from ?sk0} || \nEXISTS {?y ns:organization.leadership.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.leadership.to ?sk2} || \nEXISTS {?y ns:organization.leadership.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what drink did john pemberton create", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Pemberton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Pemberton ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what position did stanley matthews play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sir Stanley Matthews)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sir Stanley Matthews ns:soccer.football_player.position_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was bonnie prince charlie full name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Edward Stuart)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Edward Stuart ns:fictional_universe.person_in_fiction.representations_in_fiction ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who makes the voice of stewie griffin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stewie Griffin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stewie Griffin ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is angelina jolie mom and dad", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Angelina Jolie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Angelina Jolie ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the governor of indiana 2009", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Governor of Indiana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Governor of Indiana ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who brad pitt has dated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brad Pitt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brad Pitt ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n?y ns:celebrities.romantic_relationship.relationship_type ns:Dated .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what party does barack obama belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is san francisco zip code", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Francisco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Francisco ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has stephen ireland played for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stephen Ireland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stephen Ireland ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has stephen ireland played for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stephen Ireland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stephen Ireland ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did john mayer go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Mayer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Mayer ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what celebrities has brody jenner dated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brody Jenner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brody Jenner ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what celebrities has brody jenner dated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brody Jenner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brody Jenner ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is malaysian currency", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malaysia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malaysia ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who owns volkswagen car company", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Volkswagen Passenger Cars)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Volkswagen Passenger Cars ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which is the main train station in rome", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rome)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rome ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:Train .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did steve mcnair died from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Steve McNair)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Steve McNair ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the newly elected governor of california", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:California)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:California ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays roxanne in ghost rider", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ghost Rider)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ghost Rider ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Roxanne Simpson .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the sony ericsson company", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sony Mobile Communications)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sony Mobile Communications ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of currency does the dominican republic have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dominican Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dominican Republic ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do this weekend in manchester with kids", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Manchester)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Manchester ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sport is popular in italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the main headquarters of google", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Google)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Google ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was jesse owens education", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jesse Owens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jesse Owens ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does carlos santana live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carlos Santana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carlos Santana ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the new movie john carter about", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Carter)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Carter ns:film.film.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries does nafta include", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North American Free Trade Agreement)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North American Free Trade Agreement ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is houston tx in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do the seattle seahawks play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Seattle Seahawks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Seattle Seahawks ns:sports.sports_team.arena_stadium ?x .\n?x ns:architecture.structure.opened ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does michael keaton play in cars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Keaton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Keaton ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Cars .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does michael keaton play in cars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cars)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cars ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Michael Keaton .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the riviera casino", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Riviera)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Riviera ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the holy book of the buddhist religion", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Buddhism)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Buddhism ns:religion.religion.texts ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who became president when henry harrison died", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Henry Harrison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Henry Harrison ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did richard arkwright grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Arkwright)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Arkwright ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other books did louis sachar write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Sachar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Sachar ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other books did louis sachar write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Sachar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Sachar ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did roth ira originate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Roth IRA)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Roth IRA ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does the voice for darth vader", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did thomas malthus do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Robert Malthus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Robert Malthus ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for newark california", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Newark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Newark ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what states share a border with tennessee", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tennessee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tennessee ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what war did the us lose the most soldiers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:military.military_combatant.casualties ?y .\n?y ns:military.casualties.military_conflict ?x .\n?y ns:military.casualties.lower_estimate ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government is egypt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what musical instruments does justin bieber play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Justin Bieber)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Justin Bieber ns:music.artist.track_contributions ?y .\n?y ns:music.track_contribution.role ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do john lennon die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Lennon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Lennon ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in bangalore india", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bangalore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bangalore ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from greece speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from greece speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greece)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greece ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the phillies spring training stadium", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Philadelphia Phillies)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Philadelphia Phillies ns:base.schemastaging.sports_team_extra.training_ground ?y .\n?y ns:base.schemastaging.team_training_ground_relationship.facility ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies does matt dallas play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Matt Dallas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Matt Dallas ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was john f kennedy 's family", "output": "SELECT DISTINCT ?x\nWHERE {\n\tFILTER (?x != ns:John F. Kennedy)\n\t{ \n\t  # Parents\n\t  ns:John F. Kennedy ns:people.person.parents ?x .\n\t}\n\tUNION\n\t{\n\t  # Children\n\t  ns:John F. Kennedy ns:people.person.children ?x .\n\t}\n\tUNION\n\t{\n\t  # Siblings\n\t  ns:John F. Kennedy ns:people.person.sibling_s ?y .\n\t  ?y ns:people.sibling_relationship.sibling ?x .\n\t}\n\tUNION\n\t{\n\t  # Spouse\n\t  ns:John F. Kennedy ns:people.person.spouse_s ?y .\n\t  ?y ns:people.marriage.spouse ?x .\n\t  ?y ns:people.marriage.type_of_union ns:m.04ztj .\n\t  FILTER (NOT EXISTS {?y ns:people.marriage.to []})\n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is harley davidson corporate headquarters", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harley-Davidson Motor Company)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harley-Davidson Motor Company ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the ottoman empire based", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ottoman Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ottoman Empire ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was bin laden found and killed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Osama bin Laden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Osama bin Laden ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the names of harry potter movies in order", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harry Potter)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harry Potter ns:film.film_series.films_in_series ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did pamela courson die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pamela Courson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pamela Courson ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did dr jack kevorkian do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jack Kevorkian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jack Kevorkian ns:base.activism.activist.area_of_activism ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does bolivia border", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bolivia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bolivia ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does nolan ryan play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nolan Ryan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nolan Ryan ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does justin bieber come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Justin Bieber)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Justin Bieber ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the head judge of the supreme court called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Supreme Court of the United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Supreme Court of the United States ns:government.governmental_body.offices_positions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was frida kahlo influenced by", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Frida Kahlo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Frida Kahlo ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is taylor swift from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taylor Swift)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taylor Swift ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of religion does argentina have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when is the last time the giants won the world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Francisco Giants)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Francisco Giants ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the main language used in china", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the battle of waterloo occur", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Waterloo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Waterloo ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did vladimir lenin marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vladimir Lenin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vladimir Lenin ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the baltimore ravens win superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Ravens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Ravens ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:Super Bowl .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does cristiano ronaldo play for 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cristiano Ronaldo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cristiano Ronaldo ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is money called in italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did theodor schwann study", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodor Schwann)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodor Schwann ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the virginia senators 2013", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Virginia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Virginia ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:United States Senate .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was dr seuss 's real name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Lesieg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Lesieg ns:base.schemastaging.context_name.official_name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are members of the security council", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Nations Security Council)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Nations Security Council ns:base.unitednations.united_nations_body.members ?y .\n?y ns:base.unitednations.united_nations_body_membership.member ?x .\nFILTER(NOT EXISTS {?y ns:base.unitednations.united_nations_body_membership.from ?sk0} || \nEXISTS {?y ns:base.unitednations.united_nations_body_membership.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:base.unitednations.united_nations_body_membership.to ?sk2} || \nEXISTS {?y ns:base.unitednations.united_nations_body_membership.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the nordic countries", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nordic countries)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nordic countries ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country sponsored ferdinand magellan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ferdinand Magellan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ferdinand Magellan ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did vera ellen die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vera-Ellen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vera-Ellen ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of modern day egypt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what province is toronto in ( 7 letters )", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto ns:base.biblioness.bibs_location.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what province is toronto in ( 7 letters )", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Canadian Province .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency of brazil now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what types of art did andy warhol do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andy Warhol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andy Warhol ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other states border florida", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Florida)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Florida ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the predominant religions in russia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who will coach carolina panthers in 2013", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carolina Panthers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carolina Panthers ns:american_football.football_team.current_head_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did louis sachar grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Sachar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Sachar ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays marshall eriksen", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marshall Eriksen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marshall Eriksen ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do for fun in houston", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did otto frank go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Otto Frank)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Otto Frank ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what else has jennifer lawrence played in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jennifer Lawrence)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jennifer Lawrence ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the governor of pennsylvania state now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is ancient phoenician", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Phoenicia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Phoenicia ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the celtics practice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Boston Celtics)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Boston Celtics ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where bin laden got killed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Osama bin Laden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Osama bin Laden ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does toronto get its water from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto ns:base.infrastructure.infrastructural_municipality.sewage_treatment_plant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from bosnia speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bosnia and Herzegovina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bosnia and Herzegovina ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from bosnia speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bosnia and Herzegovina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bosnia and Herzegovina ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did hugo chavez go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hugo Ch\u00e1vez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hugo Ch\u00e1vez ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does japan import from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of sonia gandhi daughter", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sonia Gandhi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sonia Gandhi ns:people.person.children ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who do islamic people pray to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.deities ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was mary todd lincoln from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary Todd Lincoln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary Todd Lincoln ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did charles darwin die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies does nick cannon play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nick Cannon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nick Cannon ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the big earthquake hit san francisco", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:1906 San Francisco earthquake)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:1906 San Francisco earthquake ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was king george vi married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George VI)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George VI ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was jesus after he died on the cross", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jesus Christ)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jesus Christ ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is sir james dyson", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James Dyson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James Dyson ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who voiced darth vader in the original star wars movies", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n?y ns:film.performance.film ns:Star Wars .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what high school did maya angelou go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Maya Angelou)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Maya Angelou ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:High school .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what 5 countries border switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did benito mussolini govern", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benito Mussolini)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benito Mussolini ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the leader of the first communist party of china", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Communist Party of China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Communist Party of China ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did miles davis died of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miles Davis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miles Davis ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for azle texas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Azle)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Azle ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what date did sally pearson won gold", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sally Pearson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sally Pearson ns:olympics.olympic_athlete.medals_won ?y .\n?y ns:olympics.olympic_medal_honor.olympics ?x .\n?y ns:olympics.olympic_medal_honor.medal ns:Gold medal .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the detroit pistons last win the championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Detroit Pistons)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Detroit Pistons ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the philadelphia flyers win the cup", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Philadelphia Flyers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Philadelphia Flyers ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is number 22 for the dallas cowboys", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dallas Cowboys)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dallas Cowboys ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.number ?sk0 .\nFILTER (str(?sk0) = \"22\")\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk1} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk2 . \nFILTER(xsd:datetime(?sk2) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk3} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk4 . \nFILTER(xsd:datetime(?sk4) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st paul nc in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Pauls)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Pauls ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is olympic national park wa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Olympic National Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Olympic National Park ns:base.usnationalparks.us_national_park.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is olympic national park wa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Olympic National Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Olympic National Park ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did nat turner 1831 rebellion occur", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nat Turner's slave rebellion)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nat Turner's slave rebellion ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who would play luke skywalker", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Luke Skywalker)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Luke Skywalker ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where turkish people originate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkish people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkish people ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state is barack obama from", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Barack Obama ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.0kpys4 .  #US State\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what years did joe montana win super bowl", "output": "SELECT DISTINCT ?a\nWHERE {\n    ns:Joe Montana ns:sports.pro_athlete.teams ?y .\n    ?y ns:sports.sports_team_roster.team ?x . #team\n    ?x ns:sports.sports_team.championships ?z . # super bowls\n    ?z ns:common.topic.notable_types ns:m.01xljv1 . #super bowl\n    ?z ns:sports.sports_championship_event.champion ?c .\n    ?z ns:time.event.start_date ?a .\n\n  # Check the time overlap\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \n             EXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \n             FILTER(xsd:datetime(?sk1) - xsd:datetime(?a) <= 0) })\n\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \n             EXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \n             FILTER(xsd:datetime(?sk3) - xsd:datetime(?a) >= 0 ) }) \n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what awards gary paulsen won", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gary Paulsen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gary Paulsen ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did alexander graham bell die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alexander Graham Bell)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alexander Graham Bell ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the golden state warriors win their first nba championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Golden State Warriors)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Golden State Warriors ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency should i take to turkey", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are in the uk yahoo", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:UK constituent country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what superbowl did the baltimore ravens win", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Ravens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Ravens ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the language of russia s spoken", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the language of russia s spoken", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the king of cambodia now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cambodia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cambodia ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:King .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are serena williams parents", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Serena Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Serena Williams ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what schools did sir isaac newton go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the cause of death for huell howser", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Huell Howser)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Huell Howser ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books are written by suzanne collins", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Suzanne Collins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Suzanne Collins ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books are written by suzanne collins", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Suzanne Collins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Suzanne Collins ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries does england border", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:England ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"Country\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did messi play for in 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lionel Messi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lionel Messi ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is greensburg indiana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greensburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greensburg ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays voldemort", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lord Voldemort)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lord Voldemort ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what colleges did harper lee attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harper Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harper Lee ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who founded the kkk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ku Klux Klan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ku Klux Klan ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what jobs did john adams have before he was president", "output": "SELECT DISTINCT ?x\nWHERE {\nns:John Adams ns:government.politician.government_positions_held ?p .\n?p ns:government.government_position_held.office_position_or_title ns:m.060d2 .\n?p ns:government.government_position_held.from ?from .\nns:John Adams ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.office_position_or_title ?x .\n?y ns:government.government_position_held.from ?z .\nfilter(xsd:datetime(?z) - xsd:datetime(?from) < 0)\n }"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did super mario bros 2 come out", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Super Mario Bros. 2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Super Mario Bros. 2 ns:cvg.computer_videogame.release_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political party did andrew johnson belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andrew Johnson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andrew Johnson ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was osama bin laden killed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Osama bin Laden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Osama bin Laden ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where were greek temples built", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Ancient Greek temple ns:architecture.building_function.buildings ?y .\n\t?y ns:travel.tourist_attraction.near_travel_destination ?x .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are people who speak arabic from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arabic Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arabic Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are people who speak arabic from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arabic Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arabic Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was queen elizabeth ii mom", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elizabeth II)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elizabeth II ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art did pablo picasso paint", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pablo Picasso)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pablo Picasso ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is ella fitzgerald parents name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ella Fitzgerald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ella Fitzgerald ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is anne hathaway parents", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anne Hathaway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anne Hathaway ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does don draper gets engaged to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Don Draper)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Don Draper ns:fictional_universe.fictional_character.married_to ?y .\n?y ns:fictional_universe.marriage_of_fictional_characters.spouses ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was van halen first album", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Van Halen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Van Halen ns:music.artist.album ?x .\n?x ns:music.album.release_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political system did spain have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the supreme court cases", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Supreme Court of the United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Supreme Court of the United States ns:law.court.legal_cases ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is penn state 's main campus", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania State University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania State University ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does alaska belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alaska)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alaska ns:base.biblioness.bibs_location.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does alaska belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alaska)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alaska ns:base.locations.states_and_provences.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does alaska belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alaska)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alaska ns:location.administrative_division.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is kansas city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kansas City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kansas City ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was pink floyd 's first album", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pink Floyd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pink Floyd ns:music.artist.album ?x .\n?x ns:music.album.release_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did granville t. woods married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Granville Woods)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Granville Woods ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language did the sioux indians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sioux)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sioux ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some famous people from el salvador", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:El Salvador)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:El Salvador ns:location.location.people_born_here ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did brett gardner play for in 2008", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brett Gardner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brett Gardner ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays dwight in the office", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Office)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Office ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Dwight Schrute .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is san diego ca", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Diego)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Diego ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the miami dolphins quarterback", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miami Dolphins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miami Dolphins ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.position ns:Quarterback .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did anne frank go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anne Frank)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anne Frank ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what basketball player is married to monica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Monica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Monica ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n?x ns:people.person.profession ns:Basketball player .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did hitler use to kill himself", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when is the last time the denver broncos won the superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denver Broncos)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denver Broncos ns:sports.sports_team.championships ?x .\n?x ns:time.event.instance_of_recurring_event ns:Super Bowl .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was caesar when he was stabbed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Julius Caesar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Julius Caesar ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what style of music did bessie smith perform", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bessie Smith)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bessie Smith ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did jackie robinson", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jackie Robinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jackie Robinson ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is chicago in right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chicago)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chicago ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what two countries make up the dominican republic", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dominican Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dominican Republic ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the vice president under ronald reagan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ronald Reagan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ronald Reagan ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do the chicago white sox play home games", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chicago White Sox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chicago White Sox ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part did jeff conaway play in grease", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jeff Conaway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jeff Conaway ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Grease .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part did jeff conaway play in grease", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Grease)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Grease ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Jeff Conaway .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what book did benjamin franklin published", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:Book .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency to take to barbados", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbados)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbados ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did they get the name stanley cup", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stanley Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stanley Cup ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code of syracuse ny", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Syracuse)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Syracuse ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did tennessee williams go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tennessee Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tennessee Williams ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of airport in new york", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:Air travel .\n?x ns:location.location.containedby ns:New York .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was queen victoria 's husband", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Queen Victoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Queen Victoria ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did benjamin franklin work", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does barbara bush do for work", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbara Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbara Bush ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does barbara bush do for work", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbara Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbara Bush ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.title ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is jacob latimore", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jacob Latimore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jacob Latimore ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what happened to dunkirk during ww2", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dunkirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dunkirk ns:location.location.events ?x .\n?x ns:time.event.included_in_event ns:World War II .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was scottie pippen good at", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scottie Pippen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scottie Pippen ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.sport ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played donna on west wing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Donnatella Moss)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Donnatella Moss ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:The West Wing .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played meg in season 1 of family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Meg Griffin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Meg Griffin ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:Family Guy - Season 1 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the dallas cowboys won the superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dallas Cowboys)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dallas Cowboys ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:Super Bowl .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do ireland play rugby union", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ireland national rugby union team)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ireland national rugby union team ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who killed lee harvey oswald shot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lee Harvey Oswald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lee Harvey Oswald ns:user.alexander.misc.murdered_person.murdered_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time knicks won the championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York Knicks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York Knicks ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did celtics win the championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Boston Celtics)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Boston Celtics ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries included in oceania", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Oceania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Oceania ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"Country\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country is nicki minaj from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nicki Minaj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nicki Minaj ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played harry potter dumbledore actor", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Professor Albus Dumbledore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Professor Albus Dumbledore ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the prime minister of pakistan in 1999", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Prime Minister of Pakistan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Prime Minister of Pakistan ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did christopher plummer play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Christopher Plummer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Christopher Plummer ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is capital city of morocco", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morocco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morocco ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies is omar epps in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Omar Epps)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Omar Epps ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what district does nancy pelosi represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nancy Pelosi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nancy Pelosi ns:base.government2.elected_official.elected_positions_held ?y .\n?y ns:base.government2.elected_government_positions_held.district_represented ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what district does nancy pelosi represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nancy Pelosi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nancy Pelosi ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.district_represented ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is walton indiana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Walton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Walton ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did george herbert walker bush go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George H. W. Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George H. W. Bush ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did bruce jenner win gold medal for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Caitlyn Jenner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Caitlyn Jenner ns:olympics.olympic_athlete.medals_won ?y .\n?y ns:olympics.olympic_medal_honor.event ?x .\n?y ns:olympics.olympic_medal_honor.medal ns:Gold medal .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do they speak tibetan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Standard Tibetan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Standard Tibetan ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do in hollywood ca this weekend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hollywood)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hollywood ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kim kardashian come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kim Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kim Kardashian ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what town did justin bieber grew up in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Justin Bieber)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Justin Bieber ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays charlie in the santa clause movies", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Santa Clause)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Santa Clause ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Charlie Calvin .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what highschool did r. kelly attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:R. Kelly)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:R. Kelly ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:High school .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what happened at benghazi", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benghazi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benghazi ns:location.location.events ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country is nike based in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nike, Inc.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nike, Inc. ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of money do i bring to mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did steve spurrier play pro football for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Steve Spurrier)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Steve Spurrier ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:common.topic.notable_types ns:Professional Sports Team .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do the blackhawks play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chicago Blackhawks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chicago Blackhawks ns:sports.sports_team.arena_stadium ?x .\n?x ns:architecture.structure.opened ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays john connor", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Connor)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Connor ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the main language spoken in mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are italians classified as", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italian people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italian people ns:people.ethnicity.included_in_group ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has angelina jolie accomplished", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Angelina Jolie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Angelina Jolie ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek Generations .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek II: The Wrath of Khan .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek III: The Search for Spock .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek IV: The Voyage Home .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek V: The Final Frontier .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek VI: The Undiscovered Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played captain kirk in star trek movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Trek: The Motion Picture .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played dana scully in x files", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dana Scully)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dana Scully ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:The X-Files .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was f. scott fitzgerald", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:F. Scott Fitzgerald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:F. Scott Fitzgerald ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the dominant language spoken in jamaica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the coach for the new york knicks", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York Knicks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York Knicks ns:basketball.basketball_team.head_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was wesley snipes", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wesley Snipes)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wesley Snipes ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does sherrod brown live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sherrod Brown)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sherrod Brown ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does colombia speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does colombia speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does england use now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:England ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does england use now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the original voice of meg griffin on family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Meg Griffin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Meg Griffin ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government is mali", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mali)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mali ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did cristiano ronaldo play for in 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cristiano Ronaldo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cristiano Ronaldo ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for morgantown wv", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morgantown)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morgantown ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is jacksonville fl timezone", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jacksonville)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jacksonville ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does amy stiller play in dodgeball", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Amy Stiller)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Amy Stiller ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:DodgeBall: A True Underdog Story .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does amy stiller play in dodgeball", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:DodgeBall: A True Underdog Story)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:DodgeBall: A True Underdog Story ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Amy Stiller .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were king henry vii children", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henry VII of England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henry VII of England ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does mila kunis play on family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Family Guy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Family Guy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:Mila Kunis .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the san francisco earthquake occur", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:1906 San Francisco earthquake)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:1906 San Francisco earthquake ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played damien in the omen 2006", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Omen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Omen ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Damien Thorn .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played denver in four christmases", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Four Christmases)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Four Christmases ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Denver .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do with kids in essex", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Essex)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Essex ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did the cleveland cavaliers draft", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cleveland Cavaliers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cleveland Cavaliers ns:sports.professional_sports_team.draft_picks ?y .\n?y ns:sports.sports_league_draft_pick.player ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what concentration camp did anne frank died in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anne Frank)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anne Frank ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does east timor speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Timor-Leste)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Timor-Leste ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does east timor speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Timor-Leste)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Timor-Leste ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency in italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does greek language come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greek Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greek Language ns:base.rosetta.languoid.parent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the currency used in italy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is audrey hepburn from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Audrey Hepburn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Audrey Hepburn ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does darth vaders voice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did douglas macarthur go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Douglas MacArthur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Douglas MacArthur ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what famous people are from barbados", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbados)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbados ns:location.location.people_born_here ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the currency used in china", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:China)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:China ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the names of michael jackson 's 3 children", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the current governor of arizona 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arizona)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arizona ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is lamar odom playing for this year", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lamar Odom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lamar Odom ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where were the great pyramids of giza built", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Great Pyramid of Giza)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Great Pyramid of Giza ns:architecture.building.building_complex ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where were the great pyramids of giza built", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Great Pyramid of Giza)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Great Pyramid of Giza ns:base.ancientegypt.pyramid.site ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do the russian speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do the russian speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do australia people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country was king tut 's tomb found", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:KV62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:KV62 ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did abraham and his descendants live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did george washington carver go to collage", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Washington Carver)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Washington Carver ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the sports in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where president obama was born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sports do people play in poland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Poland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Poland ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was demi lovato dating", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Demi Lovato)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Demi Lovato ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was demi lovato dating", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Demi Lovato)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Demi Lovato ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what films has scarlett johansson been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scarlett Johansson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scarlett Johansson ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who originally voiced meg on family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Family Guy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Family Guy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Meg Griffin .\n?y ns:tv.regular_tv_appearance.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played amy squirrel in bad teacher", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bad Teacher)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bad Teacher ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Amy Squirrel .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are boeing headquarters", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Boeing)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Boeing ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of religions are in the united states", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did viggo mortensen play in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Viggo Mortensen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Viggo Mortensen ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:The Lord of the Rings: The Fellowship of the Ring .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did viggo mortensen play in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Viggo Mortensen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Viggo Mortensen ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:The Lord of the Rings: The Return of the King .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did viggo mortensen play in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Viggo Mortensen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Viggo Mortensen ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:The Lord of the Rings: The Two Towers .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did viggo mortensen play in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Lord of the Rings: The Fellowship of the Ring)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Lord of the Rings: The Fellowship of the Ring ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Viggo Mortensen .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did viggo mortensen play in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Lord of the Rings: The Return of the King)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Lord of the Rings: The Return of the King ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Viggo Mortensen .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was isaac newton and what did he do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did william shakespeare marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies queen latifah is in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Queen Latifah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Queen Latifah ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did michelle obama graduated from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michelle Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michelle Obama ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of music did franz liszt compose", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Life of Franz Liszt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Life of Franz Liszt ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does david luiz play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Luiz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Luiz ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.championships ns:1958 FIFA World Cup .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what document did thomas jefferson wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Jefferson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Jefferson ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is martin luther king jr facts", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is victoria british columbia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Victoria)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Victoria ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how many mary mary sisters", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary Mary)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary Mary ns:music.musical_group.member ?y .\n?y ns:music.group_membership.member ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do we call the currency of france", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does david beckham play for in 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Beckham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Beckham ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did nick cannon star in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nick Cannon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nick Cannon ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what radio station is npr on in nyc", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:NPR)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:NPR ns:broadcast.radio_network.affiliates ?y .\n?y ns:broadcast.radio_affiliation_duration.station ?x .\n?x ns:broadcast.broadcast.area_served ns:New York City .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did tom landry play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tom Landry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tom Landry ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was john jay born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Jay)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Jay ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mount fuji located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mount Fuji)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mount Fuji ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was toussaint l'ouverture born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toussaint Louverture)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toussaint Louverture ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries makes up the uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:UK constituent country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is lawton ok zip code", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lawton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lawton ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital city of spain wiki answers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do they speak german", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:German Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:German Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did mark mcgwire retired", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark McGwire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark McGwire ns:baseball.baseball_player.lifetime_batting_statistics ?y .\n?y ns:baseball.lifetime_batting_statistics.ending_season ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did mark mcgwire retired", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark McGwire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark McGwire ns:baseball.baseball_player.lifetime_batting_statistics ?y .\n?y ns:baseball.lifetime_batting_statistics.last_statistics_season ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is colorado technical university", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colorado Technical University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colorado Technical University ns:common.topic.notable_types ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the currency used in france before the euro", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.country.currency_formerly_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is kentucky state slogan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kentucky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kentucky ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:Motto .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played samantha stephens in bewitched", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bewitched)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bewitched ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Samantha .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what area of science did sir isaac newton study", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is san diego in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Diego)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Diego ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is san diego in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Diego International Airport)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Diego International Airport ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which country in north america is divided into provinces", "output": "SELECT DISTINCT ?x \nWHERE {\n    ns:North America ns:location.location.contains ?x .  # North America\n    ?x ns:common.topic.notable_types ns:m.01mp . # Country\n    ?x ns:location.location.contains ?y .\n    ?y ns:common.topic.notable_types ?t . \n# All the possible \"province\" type\nFILTER ((?t = ns:m.01nm) ||\n(?t = ns:m.02_1y_9) ||\n(?t = ns:m.02_3ny_) ||\n(?t = ns:m.02_3phk) ||\n(?t = ns:m.02_3r2r) ||\n(?t = ns:m.02_3rt3) ||\n(?t = ns:m.02_3zf4) ||\n(?t = ns:m.02_40h1) ||\n(?t = ns:m.02_96lm) ||\n(?t = ns:m.02yxk5c) ||\n(?t = ns:m.02zd6yn) ||\n(?t = ns:m.03z96kq) ||\n(?t = ns:m.04g7rg9) ||\n(?t = ns:m.04js0h5) ||\n(?t = ns:m.065rjpr) ||\n(?t = ns:m.078_8dm) ||\n(?t = ns:m.0hzcb3l) ||\n(?t = ns:m.0hzcb5p) ||\n(?t = ns:m.0hzcb69) ||\n(?t = ns:m.0hzcb7p) ||\n(?t = ns:m.0hzcd76) ||\n(?t = ns:m.0hzcd7v) ||\n(?t = ns:m.0hzcdb0) ||\n(?t = ns:m.0hzcdd6) ||\n(?t = ns:m.0hzcdlq) ||\n(?t = ns:m.0hzcdmg) ||\n(?t = ns:m.0hzcdrj) ||\n(?t = ns:m.0hzcdzg) ||\n(?t = ns:m.0hzcdzv) ||\n(?t = ns:m.0hzcf4d) ||\n(?t = ns:m.0hzcf50) ||\n(?t = ns:m.0hzcfdx) ||\n(?t = ns:m.0hzcffv) ||\n(?t = ns:m.0hzcfgg) ||\n(?t = ns:m.0hzcfj0) ||\n(?t = ns:m.0hzcfm2) ||\n(?t = ns:m.0hzcfpz) ||\n(?t = ns:m.0hzcfsv) ||\n(?t = ns:m.0hzcfyb) ||\n(?t = ns:m.0hzcg20) ||\n(?t = ns:m.0hzcg90) ||\n(?t = ns:m.0hzcgdz) ||\n(?t = ns:m.0hzcgfl) ||\n(?t = ns:m.0hzcggv) ||\n(?t = ns:m.0hzcgj2) ||\n(?t = ns:m.0hzcgk4) ||\n(?t = ns:m.0hzcgny) ||\n(?t = ns:m.0hzcgqt) ||\n(?t = ns:m.0hzcgsp) ||\n(?t = ns:m.0hzcgvh) ||\n(?t = ns:m.0hzcgvw) ||\n(?t = ns:m.0hzcgxf) ||\n(?t = ns:m.0hzcjv6) ||\n(?t = ns:m.0hzcjvv) ||\n(?t = ns:m.0hzcjxq) ||\n(?t = ns:m.0hzck_1) ||\n(?t = ns:m.0hzck1r) ||\n(?t = ns:m.0hzck47) ||\n(?t = ns:m.0hzck7p) ||\n(?t = ns:m.0hzckbh) ||\n(?t = ns:m.0hzckgc) ||\n(?t = ns:m.0hzcklh) ||\n(?t = ns:m.0hzckv_) ||\n(?t = ns:m.0hzckvp) ||\n(?t = ns:m.0hzckwy) ||\n(?t = ns:m.0hzcl1k) ||\n(?t = ns:m.0hzcl2t) ||\n(?t = ns:m.0hzfxh6) ||\n(?t = ns:m.0hzfxjh) ||\n(?t = ns:m.0hzfxny) ||\n(?t = ns:m.0hzfxv1) ||\n(?t = ns:m.0hzfxx7) ||\n(?t = ns:m.0hzfxzs) ||\n(?t = ns:m.0hzfy0d) ||\n(?t = ns:m.0hz_gjz) ||\n(?t = ns:m.0hzjldq) ||\n(?t = ns:m.0hzjm9b) ||\n(?t = ns:m.0hzjmf9) ||\n(?t = ns:m.0hzjmjf) ||\n(?t = ns:m.0hzjmlj) ||\n(?t = ns:m.0hzjmm6) ||\n(?t = ns:m.0hzjmmx) ||\n(?t = ns:m.0j1zd59) ||\n(?t = ns:m.0j1zd5w) )\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is real name of santa claus", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Santa Claus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Santa Claus ns:fictional_universe.fictional_character.based_on ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did kelly slater go pro", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kelly Slater)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kelly Slater ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.career_start ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did coretta scott king died from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Coretta Scott King)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Coretta Scott King ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does wh smith stand for", "output": "SELECT DISTINCT ?x\nWHERE {\n  ?x ns:common.topic.alias \"W H Smith\"@en .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was vp for nixon", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Nixon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Nixon ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what religion did adolf hitler follow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:people.person.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the illinois river on a map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Illinois River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Illinois River ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where honduras in the world", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Honduras)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Honduras ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does ronaldinho play for now 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ronaldinho)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ronaldinho ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what galileo galilei was famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Galileo Galilei)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Galileo Galilei ns:user.lindenb.default_domain.scientist.known_for ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the major trading partners of germany", "output": "SELECT DISTINCT ?x \nWHERE {\n\tFILTER (?x != ns:Germany)\n\t{ \n\t  ns:Germany ns:location.statistical_region.places_exported_to ?y .\n\t  ?y ns:location.imports_and_exports.exported_to ?x . \n\t}\n\tUNION\n\t{\n\t  ns:Germany ns:location.statistical_region.places_imported_from ?y .\n\t  ?y ns:location.imports_and_exports.imported_from ?x . \n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did romney graduated college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:Bachelor of Arts .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did johnny depp play in corpse bride", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Johnny Depp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Johnny Depp ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Corpse Bride .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did johnny depp play in corpse bride", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Corpse Bride)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Corpse Bride ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Johnny Depp .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for jonesboro ar", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jonesboro)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jonesboro ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did se hinton go", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:S. E. Hinton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:S. E. Hinton ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was taylor swift fearless tour", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fearless Tour)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fearless Tour ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did charles darwin and his wife live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the voice of kitt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:KITT)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:KITT ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is eminem 's real full name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Eminem)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Eminem ns:base.schemastaging.context_name.official_name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is amy grant 's first husband", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Amy Grant)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Amy Grant ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the seven nations of central america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Central America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Central America ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is jamie spears baby name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamie Lynn Spears)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamie Lynn Spears ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the mother of prince michael jackson", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the clemson mascot name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Clemson University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Clemson University ns:education.educational_institution.mascot ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what rainforest is in south america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South America ns:location.location.contains ?x .\n?x ns:geography.geographical_feature.category ns:Forest .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art does claude monet do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Claude Monet)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Claude Monet ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did we start war with iraq", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iraq War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iraq War ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what guitar did kurt cobain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kurt Cobain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kurt Cobain ns:music.guitarist.guitars_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did jennifer lawrence play in x men", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jennifer Lawrence)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jennifer Lawrence ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:X-Men: Days of Future Past .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the governor of virginia 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Virginia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Virginia ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did darth vaders voice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is walton county ga", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Walton County)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Walton County ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what cancer did jackie kennedy die of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jacqueline Kennedy Onassis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jacqueline Kennedy Onassis ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does lauren conrad major in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lauren Conrad)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lauren Conrad ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is pennsylvania in right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did mario lopez go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mario Lopez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mario Lopez ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tupac from originally", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tupac Shakur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tupac Shakur ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what role did george lucas play in star wars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Lucas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Lucas ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Star Wars Episode III: Revenge of the Sith .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sarah dessen books are movies", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sarah Dessen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sarah Dessen ns:film.film_story_contributor.film_story_credits ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in kauai hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in kauai hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaiian Islands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaiian Islands ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in kauai hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kauai)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kauai ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in kauai hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kauai County)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kauai County ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the current time in kauai hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was farrah fawcett buried", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Farrah Fawcett)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Farrah Fawcett ns:people.deceased_person.place_of_burial ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what inspired steinbeck", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Steinbeck)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Steinbeck ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does cuba have today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cuba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cuba ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are english speakers distributed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are english speakers distributed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the capital of italy today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in the bahamas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bahamas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bahamas ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in the bahamas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bahamas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bahamas ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did george michael go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Michael)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Michael ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what club does cristiano ronaldo play for in 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cristiano Ronaldo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cristiano Ronaldo ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is in the bahamas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bahamas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bahamas ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people speak in brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who influenced samuel taylor coleridge", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Samuel Taylor Coleridge)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Samuel Taylor Coleridge ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does kim kardashian work as", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kim Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kim Kardashian ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the mississippi river end", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mississippi River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mississippi River ns:geography.river.mouth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played carlton lassiter on psych", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Psych)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Psych ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Carlton Lassiter .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is president of israel", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Israel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Israel ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:President .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the anasazi indians live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ancestral Puebloans)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ancestral Puebloans ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays harley quinn", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harley Quinn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harley Quinn ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was francis bacon contributions", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Francis Bacon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Francis Bacon ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is ruling libya", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Libya)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Libya ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Chairman .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when does ziva start on ncis", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:NCIS)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:NCIS ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.seasons ?x .\n?y ns:tv.regular_tv_appearance.character ns:Mossad Agent Ziva David .\n?x ns:tv.tv_series_season.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the national anthem of canada ( 2 words )", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.country.national_anthem ?y .\n?y ns:government.national_anthem_of_a_country.anthem ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did mark zuckerberg study", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Zuckerberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Zuckerberg ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which country was michael jackson born", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Michael Jackson ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was stephen r covey", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stephen Covey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stephen Covey ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country was stalin in charge of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joseph Stalin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joseph Stalin ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is monta ellis career high points", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Monta Ellis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Monta Ellis ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.award ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what nationality is rihanna", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rihanna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rihanna ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what has shannen doherty played in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shannen Doherty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shannen Doherty ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did joakim noah", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joakim Noah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joakim Noah ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays billy elliot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Billy Elliot)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Billy Elliot ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Billy Elliot .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kourtney kardashian boyfriends name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kourtney Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kourtney Kardashian ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government does australia use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Australia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Australia ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did howie long", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Howie Long)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Howie Long ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the greek alphabet come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Greek alphabet)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Greek alphabet ns:language.language_writing_system.parent_writing_systems ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is elizabethtown kentucky", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Elizabethtown)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Elizabethtown ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to see in christchurch new zealand", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Christchurch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Christchurch ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is chris paul from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chris Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chris Paul ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was albert pujols rookie year", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Pujols)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Pujols ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:National League Rookie of the Year .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the colors of the ny giants", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York Giants)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York Giants ns:sports.sports_team.colors ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what business did andrew carnegie dominate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andrew Carnegie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andrew Carnegie ns:base.kwebbase.kwtopic.disciplines ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was sir isaac newton 's inventions", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did shaq first play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shaquille O'Neal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shaquille O'Neal ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the artist of mickey mouse", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mickey Mouse)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mickey Mouse ns:fictional_universe.fictional_character.character_created_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for concord", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Concord)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Concord ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what football team is michael vick on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Vick)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Vick ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the columbia river start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Columbia River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Columbia River ns:geography.river.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are all the names of the harry potter books", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harry Potter)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harry Potter ns:book.book_character.appears_in_book ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was sir walter raleigh and what did he do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Walter Raleigh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Walter Raleigh ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are in the euro dollar", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Euro)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Euro ns:finance.currency.countries_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency can you use in barbados", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barbados)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barbados ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is angelina jolie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Angelina Jolie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Angelina Jolie ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is nineveh city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nineveh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nineveh ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the state flower of new mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New Mexico ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:State flower .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the national ffa foundation located today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:National FFA Organization)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:National FFA Organization ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which countries speak germanic languages", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:German Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:German Language ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:German Language .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays eowyn in lord of the rings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Lord of the Rings: The Return of the King)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Lord of the Rings: The Return of the King ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:\u00c9owyn .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is augusta masters 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:2012 Masters Tournament)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:2012 Masters Tournament ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of cancer did eva peron die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Eva Per\u00f3n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Eva Per\u00f3n ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did terrell owens play for in 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Terrell Owens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Terrell Owens ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is denmark south carolina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denmark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denmark ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is denmark south carolina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denmark)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denmark ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books did ernest hemingway write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ernest Hemingway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ernest Hemingway ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books did ernest hemingway write", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ernest Hemingway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ernest Hemingway ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did baltimore ravens win super bowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Ravens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Ravens ns:sports.sports_team.championships ?x .\n?x ns:common.topic.notable_types ns:Super bowl .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the battle of passchendaele happen", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Passchendaele)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Passchendaele ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part of the country is ohio considered", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ohio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ohio ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team is cristiano ronaldo play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cristiano Ronaldo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cristiano Ronaldo ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what standard time is michigan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michigan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michigan ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was john tyler", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Tyler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Tyler ns:common.topic.notable_types ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did romo do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sergio Romo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sergio Romo ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency can you use in jamaica", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did jay moriarty die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jay Moriarty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jay Moriarty ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the boston tea party 1773", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Boston Tea Party)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Boston Tea Party ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what drugs lindsay lohan abuse", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lindsay Lohan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lindsay Lohan ns:base.popstra.celebrity.substance_abuse ?y .\n?y ns:base.popstra.substance_abuse.substance ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did carolina panthers go to superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\n  ns:m.06x5s ns:time.recurring_event.instances ?x . # Super Bowl instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:Carolina Panthers . # (Carolina Panthers) \n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:Carolina Panthers . # (Carolina Panthers) \n  }\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the burma cyclone happen", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cyclone Nargis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cyclone Nargis ns:meteorology.tropical_cyclone.formed ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won the governor election in texas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texas ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does helen flanagan do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Helen Flanagan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Helen Flanagan ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when are the summer and winter olympics held", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Olympic Games)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Olympic Games ns:time.recurring_event.current_frequency ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tennessee river", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tennessee River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tennessee River ns:location.location.partially_containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some major events in venezuela", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Venezuela)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Venezuela ns:location.location.events ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what guitar does corey taylor play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Corey Taylor)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Corey Taylor ns:music.group_member.instruments_played ?x .\n?x ns:music.instrument.family ns:Guitar .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was president after franklin d. roosevelt", "output": "SELECT DISTINCT  ?x\nWHERE {\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y1 .  # President of the United States\n  ?y1 ns:government.government_position_held.office_holder ns:Franklin D. Roosevelt ; # Franklin D. Roosevelt\n      ns:government.government_position_held.to ?to .\n\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y2 .  # President of the United States\n  ?y2 ns:government.government_position_held.office_holder ?x ;\n      ns:government.government_position_held.to ?from .\n  \n  FILTER(xsd:dateTime(?from) - xsd:dateTime(?to) > 0)\n}\nORDER BY xsd:dateTime(?from)\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kate gosselin grew up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kate Gosselin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kate Gosselin ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "under what political system does the united states government operate", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do in paris in 1 day", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paris ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city is mt lassen in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lassen Peak)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lassen Peak ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the state motto of ohio", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ohio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ohio ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:Motto .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of music did mozart composed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wolfgang Amadeus Mozart)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wolfgang Amadeus Mozart ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how many kids were there in the kennedy family", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joseph P. Kennedy, Sr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joseph P. Kennedy, Sr. ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which barcelona airport is closest to the port", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barcelona)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barcelona ns:location.location.nearby_airports ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where has the english language evolved from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.language_family ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did hitler invade that started ww2", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:World War II)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:World War II ns:time.event.includes_event ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does matt damon play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Matt Damon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Matt Damon ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was scottie pippen known for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scottie Pippen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scottie Pippen ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what continent does canada belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what continent does canada belong to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Continent .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does george wilson do for a living", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George Wilson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George Wilson ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city does fulham play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fulham F.C.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fulham F.C. ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are fun things to do in sacramento ca", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sacramento)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sacramento ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other movies is josh hutcherson in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Josh Hutchersonm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Josh Hutchersonm ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was hitler the leader of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:organization.organization_founder.organizations_founded ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what awards did marilyn monroe won", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marilyn Monroe)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marilyn Monroe ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does iran have after 1979", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iran)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iran ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did harper lee attend high school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harper Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harper Lee ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:School .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did jrr tolkien go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:J. R. R. Tolkien)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:J. R. R. Tolkien ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what art did wassily kandinsky do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wassily Kandinsky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wassily Kandinsky ns:visual_art.visual_artist.art_forms ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won the league cup in 2002", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Football League Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Football League Cup ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was antoni gaudi inspired by", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Antoni Gaud\u00ed)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Antoni Gaud\u00ed ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "in what country do people speak danish", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Danish Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Danish Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were demeter 's siblings", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Demeter)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Demeter ns:fictional_universe.fictional_character.siblings ?y .\n?y ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where should a family stay in paris", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paris ns:travel.travel_destination.accommodation ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the name of benjamin franklin wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Common-law marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the largest city in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"City\")\n?x ns:topic_server.population_number ?sk1 .\n}\nORDER BY DESC(xsd:float(?sk1))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has pudge rodriguez played for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iv\u00e1n Rodr\u00edguez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iv\u00e1n Rodr\u00edguez ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the milwaukee brewers stadium called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Milwaukee Brewers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Milwaukee Brewers ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the gallipoli war take place", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gallipoli Campaign)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gallipoli Campaign ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other movies has tom hardy played in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tom Hardy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tom Hardy ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to visit in atlanta", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Atlanta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Atlanta ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did john nash go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Forbes Nash, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Forbes Nash, Jr. ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do maltese speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malta ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do maltese speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malta ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did thomas edison do for the world", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Edison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Edison ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is shakira from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shakira)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shakira ns:music.artist.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is shakira from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shakira)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shakira ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did hayes do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rutherford B. Hayes)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rutherford B. Hayes ns:common.topic.notable_for ?y .\n?y ns:common.notable_for.object ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played bilbo in the fellowship of the ring", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Lord of the Rings: The Fellowship of the Ring)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Lord of the Rings: The Fellowship of the Ring ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Old Bilbo .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played bilbo in the fellowship of the ring", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Old Bilbo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Old Bilbo ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:The Lord of the Rings: The Fellowship of the Ring .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the most populated state in united states", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is my state senator arizona", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arizona)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arizona ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:United States Senator .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when does the vietnam war end", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vietnam War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vietnam War ns:time.event.end_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the tennessee river go", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tennessee River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tennessee River ns:geography.river.mouth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did tom hanks play in apollo 13", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tom Hanks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tom Hanks ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Apollo 13 .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did tom hanks play in apollo 13", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Apollo 13)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Apollo 13 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Tom Hanks .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they in ghana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ghana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ghana ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they in ghana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ghana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ghana ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is utah 's state capitol", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah State Capitol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah State Capitol ns:location.location.street_address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is utah 's state capitol", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah ns:base.aareas.schema.administrative_area.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is utah 's state capitol", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah ns:location.administrative_division.capital ?y .\n?y ns:location.administrative_division_capital_relationship.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is utah 's state capitol", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah ns:location.us_state.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what all did ben franklin invent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does jeremy lin play for 2013", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jeremy Lin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jeremy Lin ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is steve nash nationality", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Steve Nash)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Steve Nash ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the u s senators of pennsylvania", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:United States Senator .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language does france speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what degree did martin luther king earn", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what two states is st louis in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Louis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Louis ns:location.location.containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did peyton manning 's dad play for", "output": "SELECT DISTINCT ?x\nWHERE {\nns:Peyton Manning ns:people.person.parents ?y .\n?y ns:people.person.gender ns:m.05zppz . #Male\n?y ns:sports.pro_athlete.teams ?z .\n?z ns:sports.sports_team_roster.team ?x .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did jesse owens won", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jesse Owens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jesse Owens ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the currency used in peru", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peru)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peru ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the four nations of the united kingdom", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:base.aareas.schema.administrative_area.administrative_children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the four nations of the united kingdom", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.first_level_divisions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is judy garland father", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Judy Garland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Judy Garland ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did robert f kennedy go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert F. Kennedy ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what drug killed marilyn monroe", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marilyn Monroe)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marilyn Monroe ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the fukushima daiichi nuclear power station", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fukushima Daiichi Nuclear Power Plant)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fukushima Daiichi Nuclear Power Plant ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is los angeles california time zone", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Los Angeles)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Los Angeles ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did nicolas cage name his son", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nicolas Cage)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nicolas Cage ns:people.person.children ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency should take to mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the state governor of florida", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Florida)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Florida ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was jessica simpson married too", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jessica Simpson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jessica Simpson ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do they speak in scotland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scotland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scotland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did john dalton study", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Dalton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Dalton ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what songs do zac brown band sing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Zac Brown Band)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Zac Brown Band ns:music.artist.track ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is glastonbury england", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Glastonbury)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Glastonbury ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who formed the american federation of labor", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American Federation of Labor)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American Federation of Labor ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to visit in denver", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Denver)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Denver ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did thomas hobbes live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Hobbes)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Hobbes ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was john f kennedy when he got shot", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does italy have 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Italy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Italy ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what province is montreal canada located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Montreal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Montreal ns:base.biblioness.bibs_location.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what province is montreal canada located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Montreal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Montreal ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Canadian Province .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does kellan lutz play in prom night", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kellan Lutz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kellan Lutz ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Prom Night .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did franz liszt do to earn a living", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Life of Franz Liszt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Life of Franz Liszt ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was nikola tesla known for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nikola Tesla)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nikola Tesla ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for princeton nj", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Princeton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Princeton ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other countries border argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does people in iceland speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iceland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iceland ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does people in iceland speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iceland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iceland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the predominant religion in israel", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Israel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Israel ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n?y ns:location.religion_percentage.percentage ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has coached the carolina panthers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carolina Panthers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carolina Panthers ns:american_football.football_team.historical_coaching_staff ?y .\n?y ns:american_football.football_historical_coach_position.coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time zone is toronto gmt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did toussaint l'ouverture help free", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toussaint Louverture)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toussaint Louverture ns:military.military_person.service ?y .\n?y ns:military.military_service.military_force ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what jobs did robert burns have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Burns)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Burns ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won utah attorney general", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utah)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utah ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:Utah Attorney General .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the leader of libya 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Libya)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Libya ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Chairman .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the language spoken in indonesia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Indonesia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Indonesia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the language spoken in indonesia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Indonesia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Indonesia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who coaches the carolina panthers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carolina Panthers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carolina Panthers ns:american_football.football_team.current_head_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what other countries does south africa share borders with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Africa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Africa ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played darth vader at the end of return of the jedi", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Return of the Jedi .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did joan crawford play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joan Crawford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joan Crawford ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what products does the united states export", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.statistical_region.major_exports ?y .\n?y ns:location.imports_exports_by_industry.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the kentucky state bird", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kentucky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kentucky ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:State bird .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was canadian prime minister in 1993", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Prime Minister of Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Prime Minister of Canada ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what there to do in salt lake city utah", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Salt Lake City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Salt Lake City ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the current ohio state senator", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States Senate)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States Senate ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.district_represented ns:Ohio .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the major languages spoken in the united kingdom", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did st. nicholas do in his life", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Nicholas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Nicholas ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what happened to pope john paul ii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pope John Paul II)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pope John Paul II ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was franklin pierce famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Franklin Pierce)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Franklin Pierce ns:common.topic.notable_types ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the boston bruins went to the stanley cup", "output": "SELECT DISTINCT ?x\nWHERE {\n  ns:m.0cc8tt9 ns:time.recurring_event.instances ?x . # Stanly Cup finals instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:Boston Bruins . #(Boston Bruins)\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:Boston Bruins . #(Boston Bruins)\n  }\n\n  ?x ns:time.event.start_date ?st .\n}\nORDER BY DESC(xsd:datetime(?st))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is meredith gray married to in real life", "output": "SELECT DISTINCT ?x\nWHERE {\n                ns:Meredith Grey ns:tv.tv_character.appeared_in_tv_program ?y .\n                ?y ns:tv.regular_tv_appearance.actor ?z .\n                ?z ns:people.person.spouse_s ?s .\n                ?s ns:people.marriage.spouse ?x .\n                ?s ns:people.marriage.type_of_union ns:m.04ztj .\nFilter (?x != ?z)\nFILTER(NOT EXISTS {?s ns:people.marriage.from ?sk0} || \n           EXISTS {?s ns:people.marriage.from ?sk1 . \n                   FILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?s ns:people.marriage.to ?sk2} || \n           EXISTS {?s ns:people.marriage.to ?sk3 . \n                   FILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n?s ns:people.marriage.from ?sk4 .\n}\nORDER BY DESC(xsd:datetime(?sk4))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what inspired michelangelo buonarroti", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michelangelo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michelangelo ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does monsanto own", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Monsanto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Monsanto ns:business.business_operation.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did woody harrelson play on cheers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Woody Harrelson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Woody Harrelson ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.series ns:Cheers .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did woody harrelson play on cheers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cheers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cheers ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:Woody Harrelson .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in sweden yahoo", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sweden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sweden ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in sweden yahoo", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sweden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sweden ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language did they speak in ghana", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ghana)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ghana ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government do we have in the philippines", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Philippines)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Philippines ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what colleges did mitt romney attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is ibrahim afellay from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ibrahim Afellay)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ibrahim Afellay ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the secretary of state when andrew jackson was president", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andrew Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andrew Jackson ns:government.political_appointer.appointees ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Secretary of State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does ron stoppable 's voice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ron Stoppable)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ron Stoppable ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency is accepted in new zealand", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New Zealand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New Zealand ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what places are in the west midlands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:West Midlands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:West Midlands ns:base.aareas.schema.administrative_area.administrative_children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what places are in the west midlands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:West Midlands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:West Midlands ns:location.location.contains ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what places are in the west midlands", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:West Midlands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:West Midlands ns:location.location.contains ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do with kids in asheville nc", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Asheville)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Asheville ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is in the american league in baseball", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American League)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American League ns:baseball.baseball_league.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is in the american league in baseball", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American League)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American League ns:sports.sports_league.teams ?y .\n?y ns:sports.sports_league_participation.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did kurt warner play 4", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kurt Warner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kurt Warner ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is dirk nowitzki wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dirk Nowitzki)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dirk Nowitzki ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where all did picasso live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pablo Picasso)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pablo Picasso ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency shall i take to croatia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Croatia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Croatia ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team is raul ibanez on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ra\u00fal Iba\u00f1ez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ra\u00fal Iba\u00f1ez ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what tv series did mark harmon star in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Harmon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Harmon ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did jimmy the rev sullivan die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Rev)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Rev ns:people.deceased_person.date_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays anakin skywalker in star wars 1", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Star Wars Episode I: The Phantom Menace)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Star Wars Episode I: The Phantom Menace ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Darth Vader .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays anakin skywalker in star wars 1", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Wars Episode I: The Phantom Menace .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does michelle pfeiffer live now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michelle Pfeiffer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michelle Pfeiffer ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was laura ingalls wilder famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laura Ingalls Wilder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laura Ingalls Wilder ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is dwight howard now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dwight Howard)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dwight Howard ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is nick lachey married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nick Lachey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nick Lachey ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did madonna grew up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Madonna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Madonna ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what capital city of brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did john stockton go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Stockton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Stockton ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of currency does mexico use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who owns chrysler corporation 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chrysler Group LLC)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chrysler Group LLC ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\nFILTER(NOT EXISTS {?y ns:organization.organization_relationship.to ?sk0} || \nEXISTS {?y ns:organization.organization_relationship.to ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.organization_relationship.from ?sk2} || \nEXISTS {?y ns:organization.organization_relationship.from ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some books that mark twain wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Twain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Twain ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some books that mark twain wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Twain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Twain ns:book.book_subject.works ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was gregor mendel contribution", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gregor Mendel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gregor Mendel ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who has ray allen dated", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ray Allen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ray Allen ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is running for vice president with barack obama 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do people from the uk speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do with my kids in toronto", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government is south korea", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Korea)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Korea ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did ben franklin marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Common-law marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sri lanka capital", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sri Lanka)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sri Lanka ns:location.country.capital ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does poland have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Poland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Poland ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what famous people came from delaware", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Delaware)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Delaware ns:location.location.people_born_here ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did romney become governor", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does cyprus use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cyprus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cyprus ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of guitar does johnny depp play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Johnny Depp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Johnny Depp ns:music.group_member.instruments_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what episode of how i met your mother is carrie underwood on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carrie Underwood)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carrie Underwood ns:tv.tv_actor.guest_roles ?y .\n?y ns:tv.tv_guest_role.episodes_appeared_in ?x .\n?x ns:tv.tv_series_episode.series ns:How I Met Your Mother .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the 9 justices of the supreme court 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Supreme Court of the United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Supreme Court of the United States ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is dustin johnson the golfer", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dustin Johnson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dustin Johnson ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did cher have a son with", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Cher ns:people.person.children ?y .\n\t?y ns:people.person.gender ns:m.05zppz . #Male\n\t?y ns:people.person.parents ?x .\n  FILTER (?x != ns:Cher)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city is the university of oregon state in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:University of Oregon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:University of Oregon ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played carmen cortez in spy kids", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spy Kids)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spy Kids ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Baby Carmen .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the political system in germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what prompted shakespeare to write poetry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency in turkey called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did mark zuckerberg attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Zuckerberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Zuckerberg ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does kate middleton live 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Catherine, Duchess of Cambridge)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Catherine, Duchess of Cambridge ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art does marc chagall do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marc Chagall)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marc Chagall ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what character did billy d williams play in star wars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Billy Dee Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Billy Dee Williams ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Robot Chicken: Star Wars Episode III .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what character did billy d williams play in star wars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Billy Dee Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Billy Dee Williams ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Star Wars Episode V: The Empire Strikes Back .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what character did billy d williams play in star wars", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Billy Dee Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Billy Dee Williams ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Return of the Jedi .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is spoken in argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school did wilfred owen go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wilfred Owen)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wilfred Owen ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is kevin jonas married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kevin Jonas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kevin Jonas ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does airtran airways fly", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:AirTran Airways)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:AirTran Airways ns:aviation.airline.airports_served ?y .\n?y ns:aviation.airline_airport_presence.airport ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the city of paris get its name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paris ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did sandra bullock marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sandra Bullock)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sandra Bullock ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is olympic national park located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Olympic National Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Olympic National Park ns:base.usnationalparks.us_national_park.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the un based", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Nations)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Nations ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city and state is yale located in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:University Yale)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:University Yale ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did thomas paine die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Paine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Paine ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was barack hussein obama sr born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama, Sr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama, Sr. ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the home stadium of the new england patriots", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New England Patriots)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New England Patriots ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was kate chopin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kate Chopin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kate Chopin ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did bill clinton go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bill Clinton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bill Clinton ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are staffordshire terriers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Staffordshire Bull Terrier)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Staffordshire Bull Terrier ns:biology.animal_breed.breed_of ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are staffordshire terriers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Staffordshire Bull Terrier)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Staffordshire Bull Terrier ns:biology.organism_classification.higher_classification ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do downtown sacramento", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sacramento)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sacramento ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is michael j fox parents", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael J. Fox)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael J. Fox ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did sanjay gupta go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sanjay Gupta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sanjay Gupta ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are involved in the nafta", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North American Free Trade Agreement)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North American Free Trade Agreement ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what continent is cayman islands located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cayman Islands)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cayman Islands ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Continent .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language speak in brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language speak in brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does kroy biermann play football for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kroy Biermann)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kroy Biermann ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when is the last time the pittsburgh steelers won a superbowl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pittsburgh Steelers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pittsburgh Steelers ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:Super Bowl .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who invented islamic religion", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.founding_figures ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were we fighting in the gulf war", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gulf War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gulf War ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how many languages do they speak in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how many languages do they speak in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political party does barack obama represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies does logan lerman play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Logan Lerman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Logan Lerman ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did emperor constantine die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Constantine the Great)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Constantine the Great ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mali located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mali)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mali ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mali located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mali)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mali ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what planet did luke skywalker came from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Luke Skywalker)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Luke Skywalker ns:fictional_universe.fictional_character.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the coaches for the oakland raiders", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Oakland Raiders)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Oakland Raiders ns:american_football.football_team.current_head_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the first microsoft headquarters located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Microsoft Corporation)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Microsoft Corporation ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did john steinbeck go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Steinbeck)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Steinbeck ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did niels bohr discover about the atomic structure", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Niels Henrik David Bohr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Niels Henrik David Bohr ns:base.nobelprizes.nobel_prize_winner.nobel_honor ?y .\n?y ns:base.nobelprizes.nobel_honor.subject_area ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books did louis sachar wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Sachar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Sachar ns:book.author.book_editions_published ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what books did louis sachar wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Sachar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Sachar ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is ryan reynolds married to 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ryan Reynolds)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ryan Reynolds ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is newt gingrich 's wife 's name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Newt Gingrich)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Newt Gingrich ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?x ns:people.person.gender ns:Female .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of music did antonio vivaldi play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Antonio Vivaldi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Antonio Vivaldi ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what school does james franco go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James Franco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James Franco ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is samuel langhorne clemens well known for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Twain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Twain ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was president after william henry harrison", "output": "SELECT DISTINCT ?x \nWHERE {\nfilter (?x != ns:m.0835q)\n  ns:m.0835q ns:government.us_president.presidency_number ?p .\n  ns:President of the United States ns:government.government_office_or_title.office_holders ?y .\n  ?y ns:government.government_position_held.office_holder ?x .\n  ?x ns:government.us_president.presidency_number ?pp .\nfilter (xsd:float(?p)+1 = xsd:float(?pp))\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did rick santorum attend high school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rick Santorum)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rick Santorum ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:School .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the title of george bush 's new book", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George W. Bush)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George W. Bush ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:Book .\n?x ns:book.written_work.date_of_first_publication ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did antoine lavoisier die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Antoine Lavoisier)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Antoine Lavoisier ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of king george vi wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:George VI)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:George VI ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did seattle seahawks go to the super bowl", "output": "SELECT DISTINCT  ?x\nWHERE {\n  ns:Super Bowl ns:sports.sports_championship.events ?x . # Super Bowl\n  {\n    { ?x ns:sports.sports_championship_event.runner_up ns:Seattle Seahawks . } # Seattle Seahawks\n    UNION\n    { ?x ns:sports.sports_championship_event.champion ns:Seattle Seahawks . } # Seattle Seahawks\n  }\n  ?x ns:time.event.start_date ?d .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does sami yusuf live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sami Yusuf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sami Yusuf ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the official language of brazil now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the parliament of nepal called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Parliament of Nepal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Parliament of Nepal ns:type.object.name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when 's the last time the mets won the world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York Mets)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York Mets ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do florida panthers play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Florida Panthers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Florida Panthers ns:sports.sports_team.arena_stadium ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is john cena married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Cena)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Cena ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to do san jose ca", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Jose)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Jose ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who founded new york university", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York University ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who created arthur", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arthur)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arthur ns:tv.tv_program.program_creator ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries constitute the eu", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:European Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:European Union ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are all the countries in north africa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North Africa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North Africa ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did bobby darin die of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bobby Darin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bobby Darin ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does houston dynamo play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston Dynamo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston Dynamo ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of guitar john mayer", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Mayer)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Mayer ns:music.guitarist.guitars_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what cancer did patrick swayze", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Patrick Swayze)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Patrick Swayze ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what university did obama graduated from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:Bachelor of Arts .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what jamaican money called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the arizona cardinals stadium located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arizona Cardinals)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arizona Cardinals ns:sports.sports_team.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is sir isaac newton theory", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isaac Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isaac Newton ns:base.argumentmaps.innovator.original_ideas ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what should i do today in san francisco", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:San Francisco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:San Francisco ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who influenced picasso art", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pablo Picasso)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pablo Picasso ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is my timezone in pennsylvania", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pennsylvania)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pennsylvania ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what products and\\/or services does google offer customers", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Google)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Google ns:business.consumer_company.products ?y .\n?y ns:business.company_product_relationship.consumer_product ?x .\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.from_date ?sk0} || \nEXISTS {?y ns:business.company_product_relationship.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.to_date ?sk2} || \nEXISTS {?y ns:business.company_product_relationship.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did cliff lee play for last year", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cliff Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cliff Lee ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of democracy is the united states", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what time in china hong kong", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hong Kong)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hong Kong ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what all movies has taylor lautner been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taylor Lautner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taylor Lautner ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what disease did bernie mac die of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bernie Mac)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bernie Mac ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays spike spiegel", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spike Spiegel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spike Spiegel ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was queen isabella 's mother", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Isabella I of Castile)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Isabella I of Castile ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does chris hemsworth have a baby with", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Chris Hemsworth ns:people.person.children ?y .\n\t?y ns:people.person.parents ?x .\n  FILTER (?x != ns:Chris Hemsworth) .\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the mts iceplex in winnipeg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:MTS Iceplex)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:MTS Iceplex ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the most popular religions in israel", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Israel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Israel ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n?y ns:location.religion_percentage.percentage ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was obama 's former occupation", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are all the songs justin bieber wrote", "output": "SELECT DISTINCT ?x\nWHERE {\n\t{ \n\t  # Lyrics\n\t  ns:Justin Bieber ns:music.lyricist.lyrics_written ?x .\n\t}\n\tUNION\n\t{\n\t  # Compositions\n\t  ns:Justin Bieber ns:music.composer.compositions ?x .\n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the thames river source", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:River Thames)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:River Thames ns:geography.river.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what new movies is robert pattinson in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Pattinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Pattinson ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they use in pakistan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Pakistan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Pakistan ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of products does nike sell", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nike, Inc.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nike, Inc. ns:business.business_operation.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did lbj marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lyndon B. Johnson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lyndon B. Johnson ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kim jong il die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kim Jong-il)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kim Jong-il ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what honor did agatha christie receive in 1971", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Agatha Christie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Agatha Christie ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk0} || \nEXISTS {?y ns:award.award_honor.year ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk2} || \nEXISTS {?y ns:award.award_honor.year ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the sacred text of daoism", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Taoism)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Taoism ns:religion.religion.texts ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries speak english natively", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won fedex cup 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:FedEx Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:FedEx Cup ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:2012 PGA Tour .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is mainly spoken in egypt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.languages_spoken ?x .\n?x ns:language.human_language.main_country ns:Egypt .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played alf on tv show", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:ALF)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:ALF ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:ALF .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was gerald ford vp", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gerald Ford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gerald Ford ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is armenian currency", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Armenia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Armenia ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art did raphael sanzio create", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Raphael)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Raphael ns:visual_art.visual_artist.art_forms ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in malta", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malta ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in malta", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malta ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what religion was king louis xiv", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis XIV of France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis XIV of France ns:people.person.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what football team does mike wright play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mike Wright)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mike Wright ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did shannon hoon die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shannon Hoon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shannon Hoon ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did nicholas copernicus discover", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nicolaus Copernicus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nicolaus Copernicus ns:base.argumentmaps.innovator.original_ideas ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what teams has manny ramirez played for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Manny Ramirez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Manny Ramirez ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do the appalachian mountains run", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Appalachian Mountains)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Appalachian Mountains ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was president wilson in office", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Woodrow Wilson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Woodrow Wilson ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:President of the United States .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political party is jerry brown", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jerry Brown)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jerry Brown ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what ocean is around hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:geography.island.body_of_water ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what ocean is around hawaii", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Hawaii)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Hawaii ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Body Of Water .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the most common language spoken in argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language tunisia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tunisia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tunisia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language tunisia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tunisia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tunisia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some inventions that leonardo da vinci invented", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who wrote st trinians", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St Trinian's School)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St Trinian's School ns:fictional_universe.fictional_universe.created_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are malaysian coins called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Malaysia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Malaysia ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type government does mexico have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does dominican republic take", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dominican Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dominican Republic ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what inspired michael jackson to become a singer", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the texas state senator", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texas ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:United States Senator .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what to visit in london city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:London)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:London ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what genre of art is the mona lisa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mona Lisa)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mona Lisa ns:visual_art.artwork.art_genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does peter griffin voice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peter Griffin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peter Griffin ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did tony romo got drafted", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tony Romo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tony Romo ns:sports.pro_athlete.career_start ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the catholic holy days", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Catholicism)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Catholicism ns:religion.religion.holidays ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language is most commonly spoken in belgium", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Belgium)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Belgium ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did frank baum die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:L. Frank Baum)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:L. Frank Baum ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tunis on a map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tunisia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tunisia ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tunis on a map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tunis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tunis ns:location.administrative_division.country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is tunis on a map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tunis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tunis ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is nicolas cage married too", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nicolas Cage)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nicolas Cage ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does the voice for chucky in child 's play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Child's Play)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Child's Play ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Chucky .\n?y ns:film.performance.special_performance_type ns:Voice .\n?y ns:film.performance.film ns:Child's Play .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did mary wollstonecraft fight for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mary Wollstonecraft)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mary Wollstonecraft ns:base.activism.activist.area_of_activism ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the phillies begin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Philadelphia Phillies)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Philadelphia Phillies ns:sports.sports_team.founded ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does iceland speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iceland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iceland ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does iceland speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iceland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iceland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was dr seuss real name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Lesieg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Lesieg ns:base.schemastaging.context_name.official_name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did gloria steinem founded", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gloria Steinem)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gloria Steinem ns:organization.organization_founder.organizations_founded ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language they speak in scotland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Scotland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Scotland ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what boarding school did mark zuckerberg go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mark Zuckerberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mark Zuckerberg ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:Boarding school .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are bigos", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bigos)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bigos ns:food.dish.type_of_dish1 ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are ike and tina turner 's children", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tina Turner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tina Turner ns:people.person.children ?x .\n?x ns:people.person.parents ns:Ike Turner .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are some of leonardo da vinci most famous inventions", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did shaq come into the nba", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shaquille O'Neal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shaquille O'Neal ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do they speak turkish", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkish Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkish Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the zip code for walnut creek", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Walnut Creek)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Walnut Creek ns:location.citytown.postal_codes ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the voice of darth vader in the original star wars movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Darth Vader)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Darth Vader ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:Star Wars .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is english spoken around the world", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is english spoken around the world", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what music did louis armstrong play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Armstrong)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Armstrong ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of currency does germany use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the latin language from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Latin Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Latin Language ns:language.human_language.language_family ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the top tourist attractions in rome", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rome)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rome ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who were the children of king solomon", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Solomon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Solomon ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did andy irons die from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Andy Irons)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Andy Irons ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is auburn university located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Auburn University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Auburn University ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is auburn university located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Auburn University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Auburn University ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.state_province_region ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is tatyana ali parents", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tatyana Ali)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tatyana Ali ns:people.person.parents ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did leif ericson grow up", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leif Eriksson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leif Eriksson ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do the maasai speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Maasai people)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Maasai people ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what political party was hitler in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the leader of north korea today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North Korea)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North Korea ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Supreme leader .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do the appalachian mountains run through", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Appalachian Mountains)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Appalachian Mountains ns:location.location.partially_containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what money does spain use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was terry waite born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Terry Waite)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Terry Waite ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did the battle of san juan hill take place", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of San Juan Hill)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of San Juan Hill ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does the united states have currently", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the orioles won the world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Baltimore Orioles)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Baltimore Orioles ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did ben stiller date", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ben Stiller)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ben Stiller ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the most common language in norway", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Norway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Norway ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what influenced william shakespeare to start writing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did benjamin franklin went to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the governor of arizona 2009", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arizona)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arizona ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Governor .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies has spike lee made", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spike Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spike Lee ns:film.director.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies has spike lee made", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spike Lee)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spike Lee ns:film.producer.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did bernie mac died of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bernie Mac)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bernie Mac ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is electrolux based", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Electrolux)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Electrolux ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is houston timezone", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was shakespeare 's wife called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did truman become president", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harry S. Truman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harry S. Truman ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.basic_title ns:President .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did ferdinand magellan do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ferdinand Magellan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ferdinand Magellan ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do burmese cats originate from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Burmese cat)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Burmese cat ns:biology.animal_breed.place_of_origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played kirk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James T. Kirk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James T. Kirk ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mt st helens located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mount St. Helens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mount St. Helens ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is st paul minnesota in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Paul)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Paul ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was king henry viii son", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henry VIII of England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henry VIII of England ns:people.person.children ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does david beckham play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Beckham)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Beckham ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was franz ferdinand from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Franz Ferdinand)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Franz Ferdinand ns:music.artist.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was benedict arnold most famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benedict Arnold)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benedict Arnold ns:base.honouriam.dishonoured_person.dishonor_bestowed ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays lex luthor on smallville", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Smallville)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Smallville ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Alexander Luthor .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are dallas cowboys colors", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dallas Cowboys)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dallas Cowboys ns:sports.sports_team.colors ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the currency of the czech republic", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Czech Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Czech Republic ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the la kings won a playoff series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Los Angeles Kings)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Los Angeles Kings ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did spencer pratt go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spencer Pratt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spencer Pratt ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what disease did abraham lincoln had", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham Lincoln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham Lincoln ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is vancouver canucks coach", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vancouver Canucks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vancouver Canucks ns:sports.sports_team.coaches ?y .\n?y ns:sports.sports_team_coach_tenure.coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did cs lewis wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:C. S. Lewis)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:C. S. Lewis ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is carlos pena jr nationality", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Carlos Pe\u00f1a)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Carlos Pe\u00f1a ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was married to jane wyman", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jane Wyman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jane Wyman ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does peru speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peru)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peru ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language does peru speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peru)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peru ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is english spoken in the world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is english spoken in the world map", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:English Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:English Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did arsenal won the league", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arsenal F.C.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arsenal F.C. ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:FA Cup .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is phoenix az in right now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Phoenix)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Phoenix ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is south portland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Portland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Portland ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is south portland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Portland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Portland ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries speak french as a first language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:French)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:French ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:French .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was ptolemy and what did he do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ptolemy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ptolemy ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the name of henry viii first wife", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henry VIII of England)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henry VIII of England ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does the parana river flow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paran\u00e1 River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paran\u00e1 River ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is president nixon 's first name", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Nixon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Nixon ns:type.object.name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did theodor schwann get his education", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodor Schwann)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodor Schwann ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who or what influenced frank lloyd wright", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Frank Lloyd Wright)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Frank Lloyd Wright ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did houston rockets win their first championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Houston Rockets)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Houston Rockets ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do most of the people live in russia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.location.contains ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is holy roman empire located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Holy Roman Empire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Holy Roman Empire ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies has liam hemsworth played in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Liam Hemsworth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Liam Hemsworth ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays nicholas newman on the young and the restless", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Young and the Restless)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Young and the Restless ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Nicholas Newman .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the voice of eric cartman on south park", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:South Park)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:South Park ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Eric Cartman .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is angelina jolies brother", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Angelina Jolie)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Angelina Jolie ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the headquarters of bank of america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bank of America Corporation)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bank of America Corporation ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government japan have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does josh hamilton play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Josh Hamilton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Josh Hamilton ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is burundi country", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Burundi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Burundi ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is burundi country", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Burundi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Burundi ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "through which countries of the sahel does the niger river flow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Niger River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Niger River ns:location.location.partially_containedby ?x .\n?x ns:common.topic.notable_types ns:Country .\n?x ns:location.location.partially_contains ns:Sahel .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city does paul ryan live in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paul Ryan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paul Ryan ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city is acadia university in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Acadia University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Acadia University ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did f. scott fitzgerald do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:F. Scott Fitzgerald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:F. Scott Fitzgerald ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries does tomtom western europe include", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tomtom Nv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tomtom Nv ns:base.schemastaging.organization_extra.phone_number ?y .\n?y ns:base.schemastaging.phone_sandbox.service_location ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the national language of iran", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iran)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iran ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the second battle of ypres occur", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Second Battle of Ypres)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Second Battle of Ypres ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what languages do people speak in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did michael crabtree do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Crabtree)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Crabtree ns:american_football.football_player.position_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did michael crabtree do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Crabtree)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Crabtree ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did michael crabtree do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Crabtree)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Crabtree ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.position ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do they speak afrikaans", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Afrikaans Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Afrikaans Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where do they speak afrikaans", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Afrikaans Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Afrikaans Language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what 3 states border florida", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Florida)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Florida ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays ziva david on ncis", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mossad Agent Ziva David)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mossad Agent Ziva David ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:NCIS .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who ruled after king henry viii died", "output": "SELECT DISTINCT ?x\nWHERE {\n  ns:m.04l4rht ns:royalty.noble_title.holders ?y0 .  # Monarch of England\n  ?y0 ns:royalty.noble_title_tenure.noble_title ?title ;\n      ns:royalty.noble_title_tenure.noble_person ns:Henry VIII of England ;\n      ns:royalty.noble_title_tenure.to_date ?to .\n\n  ns:m.04l4rht ns:royalty.noble_title.holders ?y1 .  # Monarch of England\n  ?y1 ns:royalty.noble_title_tenure.noble_person ?x ;\n      ns:royalty.noble_title_tenure.from_date ?from .\n\n  FILTER (xsd:datetime(?from) - xsd:datetime(?to) >= 0)\n}\nORDER BY xsd:datetime(?from)\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the st louis cardinals coaches", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:St. Louis Cardinals)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:St. Louis Cardinals ns:baseball.baseball_team.current_coaches ?y .\n?y ns:baseball.current_coaching_tenure.baseball_coach ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is daud ibrahim", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dawood Ibrahim)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dawood Ibrahim ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what region is turkey considered", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Turkey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Turkey ns:base.locations.countries.continent ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do russians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do russians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do russians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russian ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was martin luther king jr buried", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Martin Luther King, Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Martin Luther King, Jr. ns:people.deceased_person.place_of_burial ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the official languages of argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the city wales", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wales)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wales ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country does rafael nadal play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rafael Nadal)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rafael Nadal ns:people.person.nationality ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the islamic belief", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.beliefs ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the prime minister of spain 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:Prime minister .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was the son of king leonidas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonidas I)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonidas I ns:people.person.children ?x .\n?x ns:people.person.gender ns:Male .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was judi dench married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Judi Dench)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Judi Dench ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "how many languages do they speak in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the sahara desert located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sahara)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sahara ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is rihanna mum called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rihanna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rihanna ns:people.person.parents ?x .\n?x ns:people.person.gender ns:Female .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did president theodore roosevelt take office", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Roosevelt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Roosevelt ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:President of the United States .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does michael oher play for in 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Oher)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Oher ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who or what influenced albert einstein", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Albert Einstein)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Albert Einstein ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does egypt export to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.statistical_region.places_exported_to ?y .\n?y ns:location.imports_and_exports.exported_to ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is the seat of the african union", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:African Union)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:African Union ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was kim richards in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kim Richards)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kim Richards ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what artistic style did henri rousseau work in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Henri Rousseau)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Henri Rousseau ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is john edwards indicted for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Edwards)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Edwards ns:base.crime.acquitted_person.acquittal ?y .\n?y ns:base.crime.acquittal.crime_type ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was huey newton killed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Huey P. Newton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Huey P. Newton ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the printing press invented by gutenberg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Printing press)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Printing press ns:law.invention.date_of_invention ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is midlothian scotland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Midlothian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Midlothian ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does marta play soccer", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Marta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Marta ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is mitt romney 's family from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are john terry 's children called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Terry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Terry ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what city was michael jackson born in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought in the battle of vicksburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Siege of Vicksburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Siege of Vicksburg ns:base.culturalevent.event.entity_involved ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought in the battle of vicksburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Siege of Vicksburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Siege of Vicksburg ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought in the battle of vicksburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Siege of Vicksburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Siege of Vicksburg ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_combatant ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who fought in the battle of vicksburg", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Siege of Vicksburg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Siege of Vicksburg ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_commander ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of writing is nikolai gogol famous for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Nikolai Gogol)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Nikolai Gogol ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was first world series", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:World Series)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:World Series ns:time.recurring_event.instances ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays simon birch", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Simon Birch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Simon Birch ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Simon Birch .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the timezones in the usa", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does gm make", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:General Motors)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:General Motors ns:business.business_operation.industry ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people speak in uk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United Kingdom)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United Kingdom ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people in jamaica speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people in jamaica speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jamaica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jamaica ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what position did lebron james play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:LeBron James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:LeBron James ns:basketball.basketball_player.position_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what position did lebron james play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:LeBron James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:LeBron James ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.position ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was wayne gretzky 's first team", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wayne Gretzky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wayne Gretzky ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y ns:sports.sports_team_roster.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the president of peru now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peru)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peru ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:President .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of guitar did jerry garcia play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jerry Garcia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jerry Garcia ns:music.guitarist.guitars_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of art leonardo da vinci do", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Leonardo da Vinci)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Leonardo da Vinci ns:visual_art.visual_artist.art_forms ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the senators of new jersey now", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New Jersey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New Jersey ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:United States Senate .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was rihanna raised", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rihanna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rihanna ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does messi play for 2011", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lionel Messi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lionel Messi ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does lil wayne go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lil Wayne)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lil Wayne ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did jrr tolkien go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:J. R. R. Tolkien)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:J. R. R. Tolkien ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state is saint louis university in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Louis University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Louis University ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state is saint louis university in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Louis University)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Louis University ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.state_province_region ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what religion does canada follow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which countries have spanish as their main language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spanish Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spanish Language ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:Spanish Language .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is in paul ryan 's family", "output": "SELECT DISTINCT ?x\nWHERE {\n\tFILTER (?x != ns:Paul Ryan)\n\t{ \n\t  # Parents\n\t  ns:Paul Ryan ns:people.person.parents ?x .\n\t}\n\tUNION\n\t{\n\t  # Children\n\t  ns:Paul Ryan ns:people.person.children ?x .\n\t}\n\tUNION\n\t{\n\t  # Siblings\n\t  ns:Paul Ryan ns:people.person.sibling_s ?y .\n\t  ?y ns:people.sibling_relationship.sibling ?x .\n\t}\n\tUNION\n\t{\n\t  # Spouse\n\t  ns:Paul Ryan ns:people.person.spouse_s ?y .\n\t  ?y ns:people.marriage.spouse ?x .\n\t  ?y ns:people.marriage.type_of_union ns:m.04ztj .\n\t  FILTER (NOT EXISTS {?y ns:people.marriage.to []})\n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what government does iraq use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Iraq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Iraq ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of currency do they use in spain", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Spain)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Spain ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did lincoln steffens wrote", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lincoln Steffens)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lincoln Steffens ns:book.author.works_written ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what schools did anders celsius attend", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Anders Celsius)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Anders Celsius ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what can do in new york", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does france accept", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of religion did massachusetts have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Massachusetts)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Massachusetts ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in colombia south america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do they speak in colombia south america", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Colombia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Colombia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does brazil has", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what country did gregor mendel live in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gregor Mendel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gregor Mendel ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where laura ingalls wilder lived", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laura Ingalls Wilder)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laura Ingalls Wilder ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what sports are popular in germany", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Germany)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Germany ns:sports.sports_team_location.teams ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what 's my timezone in oklahoma", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Oklahoma)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Oklahoma ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do they speak in norway", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Norway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Norway ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do they speak in norway", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Norway)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Norway ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency does singapore use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Singapore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Singapore ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did the blackfoot indians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Blackfoot Confederacy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Blackfoot Confederacy ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays robin hood in prince of thieves", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Hood: Prince of Thieves)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Hood: Prince of Thieves ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Robin Hood .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what standard time is texas", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Texas)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Texas ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does kurdish people live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kurds)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kurds ns:people.ethnicity.geographic_distribution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what instrument does louis armstrong", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Louis Armstrong)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Louis Armstrong ns:music.group_member.instruments_played ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does alyson stoner play in camp rock", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Alyson Stoner)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Alyson Stoner ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:Camp Rock .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does alyson stoner play in camp rock", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Camp Rock)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Camp Rock ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:Alyson Stoner .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what religion does madonna practice", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Madonna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Madonna ns:people.person.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what countries are located near egypt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:Country .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what made richard hammond famous", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Richard Hammond)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Richard Hammond ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who originally voiced lois griffin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Lois Griffin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Lois Griffin ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:Voice .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what airport do you fly into in paris", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paris ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?x ns:common.topic.notable_types ns:Airport .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what rihanna new album called 2012", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rihanna)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rihanna ns:music.artist.album ?x .\nFILTER(NOT EXISTS {?x ns:music.album.release_date ?sk0} || \nEXISTS {?x ns:music.album.release_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:music.album.release_date ?sk2} || \nEXISTS {?x ns:music.album.release_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does dave ramsey live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dave Ramsey)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dave Ramsey ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what discovery did galileo make", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Galileo Galilei)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Galileo Galilei ns:astronomy.astronomer.astronomical_objects_discovered ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the government system of saudi arabia", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saudi Arabia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saudi Arabia ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays the role of tony dinozzo on ncis", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Special Agent Anthony DiNozzo)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Special Agent Anthony DiNozzo ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:NCIS .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did jesus do for living", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jesus Christ)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jesus Christ ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the state name of new york city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:New York City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:New York City ns:base.biblioness.bibs_location.state ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays knox overstreet", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Knox Overstreet)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Knox Overstreet ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies did david carradine play in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:David Carradine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:David Carradine ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the stanley cup named after", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stanley Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stanley Cup ns:symbols.namesake.named_after ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is traditional chinese used", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chinese language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chinese language ns:language.human_language.main_country ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does portugal trade with", "output": "SELECT DISTINCT ?x \nWHERE {\n\tFILTER (?x != ns:Portugal)\n\t{ \n\t  ns:Portugal ns:location.statistical_region.places_exported_to ?y .\n\t  ?y ns:location.imports_and_exports.exported_to ?x . \n\t}\n\tUNION\n\t{\n\t  ns:Portugal ns:location.statistical_region.places_imported_from ?y .\n\t  ?y ns:location.imports_and_exports.imported_from ?x . \n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of political system is brazil", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language did the ancient babylonians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Babylonia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Babylonia ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language did the ancient babylonians speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Babylon)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Babylon ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of painter was wassily kandinsky", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Wassily Kandinsky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Wassily Kandinsky ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government does the united states use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what money does cuba use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Cuba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Cuba ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is my representative in illinois house", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Illinois House of Representatives)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Illinois House of Representatives ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what timezone is sweden gmt", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sweden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sweden ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was franklin d roosevelt 's job before president", "output": "SELECT DISTINCT ?x\nWHERE {\n  {\n    SELECT ?pFrom \n    WHERE {\n      ns:Franklin D. Roosevelt ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n      ?y ns:government.government_position_held.office_position_or_title ?x ; \n         ns:government.government_position_held.basic_title ns:m.060c4 ; # President\n         ns:government.government_position_held.from ?pFrom .\n    }\n  }\n  ns:Franklin D. Roosevelt ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n  ?y ns:government.government_position_held.office_position_or_title ?x ; \n     ns:government.government_position_held.from ?from .\n  \n  FILTER(xsd:dateTime(?pFrom) - xsd:dateTime(?from) > 0)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did robert downey jr go to jail", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Downey Jr.)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Downey Jr. ns:base.prison.prisoner.imprisoned ?y .\n?y ns:base.prison.imprisonment.prison ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what degrees did barack obama get", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Barack Obama)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Barack Obama ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what does god shiva represent", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Shiva)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Shiva ns:religion.deity.deity_of ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what inventions were made by ben franklin", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Benjamin Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Benjamin Franklin ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the name of the currency used in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the milwaukee brewers go to the world series", "output": "SELECT DISTINCT ?x\nWHERE {\n  ?x ns:sports.sports_championship_event.championship ns:World Series . # World Series\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was vice president with bill clinton", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bill Clinton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bill Clinton ns:government.us_president.vice_president ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what songs did franz liszt compose", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Life of Franz Liszt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Life of Franz Liszt ns:music.composer.compositions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the russian japanese war happen", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Russo-Japanese War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Russo-Japanese War ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did the la kings win the cup", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Los Angeles Kings)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Los Angeles Kings ns:sports.sports_team.championships ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of money does egypt have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what baseball team was jackie robinson on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jackie Robinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jackie Robinson ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.sport ns:Baseball .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what body of water does st lawrence river flow into", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Saint Lawrence River)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Saint Lawrence River ns:geography.river.mouth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government does the united states have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:United States of America)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:United States of America ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the names of ariel 's six sisters", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ariel)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ariel ns:fictional_universe.fictional_character.siblings ?y .\n?y ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what voices does seth macfarlane play on family guy", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Family Guy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Family Guy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:Seth MacFarlane .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was william mckinley married to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William McKinley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William McKinley ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played darth vader in the first movie", "output": "SELECT DISTINCT ?x\nWHERE {\n{\n  SELECT DISTINCT ?f1\n  WHERE {\n    ns:Darth Vader ns:film.film_character.portrayed_in_films ?y .  # Darth Vader\n    ?y ns:film.performance.film ?f1 .\n    ?f1 ns:film.film.initial_release_date ?d .\n  }\n  ORDER BY ?d\n  LIMIT 1\n}\n  ns:Darth Vader ns:film.film_character.portrayed_in_films ?y .  # Darth Vader\n  ?y ns:film.performance.actor ?x ; \n     ns:film.performance.film ?f .\n  FILTER (?f1 = ?f)\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did kevin james go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kevin James)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kevin James ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was hitler was born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adolf Hitler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adolf Hitler ns:people.person.date_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what 's there to see in atlanta", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Atlanta)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Atlanta ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was auschwitz concentration camp located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Auschwitz concentration camp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Auschwitz concentration camp ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of currency does dominican republic use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dominican Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dominican Republic ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is spoken in czech republic", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Czech Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Czech Republic ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is spoken in czech republic", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Czech Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Czech Republic ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was shakespeare born at", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:William Shakespeare)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:William Shakespeare ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did scott fitzgerald go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:F. Scott Fitzgerald)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:F. Scott Fitzgerald ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did joan crawford died of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joan Crawford)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joan Crawford ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did rob kardashian go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rob Kardashian)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rob Kardashian ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year was allen iverson mvp", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Allen Iverson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Allen Iverson ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:NBA Most Valuable Player Award .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did harry s truman go to school", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Harry S. Truman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Harry S. Truman ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is utica ny in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utica ns:location.hud_county_place.county ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what county is utica ny in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Utica)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Utica ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:US County .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did charles babbage discover", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Babbage)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Babbage ns:law.inventor.inventions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays king julian madagascar", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Madagascar)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Madagascar ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Julien .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is rick scott", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Rick Scott)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Rick Scott ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did the crimean war take place", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Crimean War)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Crimean War ns:time.event.locations ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what offices did theodore roosevelt hold", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Theodore Roosevelt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Theodore Roosevelt ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies has miley cyrus been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miley Cyrus)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miley Cyrus ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did james franco play in milk", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Milk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Milk ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:James Franco .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did the libyan conflict start", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:2011 military intervention in Libya)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:2011 military intervention in Libya ns:time.event.start_date ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what wnba team is diana taurasi on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Diana Taurasi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Diana Taurasi ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do see in paris", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Paris)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Paris ns:travel.travel_destination.tourist_attractions ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who made the laws in canada", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.governmental_body ?x .\n?x ns:government.governmental_body.jurisdiction ns:Canada .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what year did adam morrison get drafted", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Adam Morrison)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Adam Morrison ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where michael jackson from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:music.artist.origin ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where michael jackson from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what college did maya moore go to", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Maya Moore)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Maya Moore ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the dodgers won a championship", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Los Angeles Dodgers)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Los Angeles Dodgers ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is captain james cook facts", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:James Cook)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:James Cook ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did robin williams get married", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robin Williams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robin Williams ns:people.person.spouse_s ?y .\n?y ns:people.marriage.location_of_ceremony ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what form of government does canada", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Canada)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Canada ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who do islamic people follow", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Islam ns:religion.religion.deities ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of government does peru", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Peru)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Peru ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who was in the israeli palestinian conflict", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Israeli\u2013Palestinian conflict)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Israeli\u2013Palestinian conflict ns:time.event.people_involved ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who founded the afl", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:American Football League)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:American Football League ns:organization.organization.founders ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did diego velazquez die", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Diego Vel\u00e1zquez)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Diego Vel\u00e1zquez ns:people.deceased_person.place_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the country code for mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:base.aareas.schema.administrative_area.short_name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is the country code for mexico", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mexico)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mexico ns:location.country.internet_tld ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what currency do they use in switzerland", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Switzerland)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Switzerland ns:location.country.currency_used ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is president kennedy buried", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John F. Kennedy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John F. Kennedy ns:people.deceased_person.place_of_burial ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the prophet mohammed from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Muhammad in Islam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Muhammad in Islam ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do ukrainian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ukraine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ukraine ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do ukrainian people speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ukraine)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ukraine ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who are the judges appointed in the supreme court", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Supreme Court of the United States)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Supreme Court of the United States ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which country in europe has the largest land area", "output": "SELECT DISTINCT ?x\nWHERE {\n                ns:Europe ns:base.locations.continents.countries_within ?x .\n                ?x ns:location.location.area ?y .\n}\nORDER BY DESC(xsd:float(?y))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when did kaley cuoco join charmed", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kaley Cuoco)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kaley Cuoco ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.from ?x .\n?y ns:tv.regular_tv_appearance.series ns:Charmed .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is chris rock from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chris Rock)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chris Rock ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was the last time the toronto maple leafs win the stanley cup", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Toronto Maple Leafs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Toronto Maple Leafs ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what kind of language do egyptian speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Egypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Egypt ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do brazilians use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do brazilians use", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Brazil)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Brazil ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what position did vince lombardi play", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vince Lombardi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vince Lombardi ns:american_football.football_player.position_s ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played stanley kowalski in a streetcar named desire movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:A Streetcar Named Desire)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:A Streetcar Named Desire ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Stanley Kowalski .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played stanley kowalski in a streetcar named desire movie", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Stanley Kowalski)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Stanley Kowalski ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:A Streetcar Named Desire .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did the voice for lola bunny", "output": "SELECT DISTINCT ?x\nWHERE {\n\t{ \n\t  # Film\n\t  ns:Lola Bunny ns:film.film_character.portrayed_in_films ?y .\n\t  ?y ns:film.performance.actor ?x .\n\t  ?y ns:film.performance.special_performance_type ns:m.02nsjvf . #voice\n\t}\n\tUNION\n\t{\n\t  # TV\n\t  ns:Lola Bunny ns:tv.tv_character.appeared_in_tv_program ?y .\n\t  ?y ns:tv.regular_tv_appearance.actor ?x .\n\t}\n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what book did charles darwin wrote in 1859", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Charles Darwin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Charles Darwin ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:Book .\nFILTER(NOT EXISTS {?x ns:book.written_work.date_written ?sk0} || \nEXISTS {?x ns:book.written_work.date_written ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:book.written_work.date_written ?sk2} || \nEXISTS {?x ns:book.written_work.date_written ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do serbs speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Serbia)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Serbia ns:location.country.official_language ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do serbs speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Serbs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Serbs ns:people.ethnicity.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the cause of death for laci peterson", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Laci Peterson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Laci Peterson ns:people.deceased_person.cause_of_death ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team is kris humphries play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kris Humphries)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kris Humphries ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies gerard butler has been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Gerard Butler)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Gerard Butler ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did john franklin live", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Franklin)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Franklin ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what was the last movie sean connery was in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sean Connery)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sean Connery ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n?x ns:film.film.initial_release_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did drogba play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Didier Drogba)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Didier Drogba ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where did crabtree go to college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Crabtree)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Crabtree ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:College/University .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does freddie ljungberg come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fredrik Ljungberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fredrik Ljungberg ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is number 22 on miami dolphins", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Miami Dolphins)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Miami Dolphins ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.number ?sk0 .\nFILTER (str(?sk0) = \"22\")\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk1} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk2 . \nFILTER(xsd:datetime(?sk2) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk3} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk4 . \nFILTER(xsd:datetime(?sk4) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what state did john adams live in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Adams)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Adams ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of music did vivaldi compose", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Antonio Vivaldi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Antonio Vivaldi ns:music.artist.genre ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team does mike fisher play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mike Fisher)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mike Fisher ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what films has daniel craig been in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Daniel Craig)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Daniel Craig ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what materials did eduardo paolozzi use in his work", "output": "SELECT DISTINCT ?x\nWHERE {\n\tns:Eduardo Paolozzi ns:visual_art.visual_artist.artworks ?y .\n\t?y ns:visual_art.artwork.media ?x . \n}"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did joe biden study in college", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Joe Biden)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Joe Biden ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays timon 's voice in the lion king", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:The Lion King)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:The Lion King ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:Timon .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what part of the country is ohio in", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Ohio)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Ohio ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:Region .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which island is kailua on", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Kailua)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Kailua ns:location.location.containedby ?x .\n?x ns:geography.island.island_group ns:Hawaiian Islands .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what language do speak in argentina", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did whoopi goldberg won a grammy for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Whoopi Goldberg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Whoopi Goldberg ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n?y ns:award.award_honor.ceremony ns:28th Annual Grammy Awards .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played maggie in himym", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Maggie Simpson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Maggie Simpson ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does owen schmitt play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Owen Schmitt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Owen Schmitt ns:american_football.football_player.games ?y .\n?y ns:american_football.player_game_statistics.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does owen schmitt play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Owen Schmitt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Owen Schmitt ns:american_football.football_player.receiving ?y .\n?y ns:american_football.player_receiving_statistics.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who does owen schmitt play for", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Owen Schmitt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Owen Schmitt ns:american_football.football_player.rushing ?y .\n?y ns:american_football.player_rushing_statistics.team ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what party was thomas jefferson affiliated with", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Thomas Jefferson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Thomas Jefferson ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what religions are popular in france", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who played berger in sex and the city", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sex and the City)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sex and the City ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:Jack Berger .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who won the 2000 fa cup final", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:FA Cup)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:FA Cup ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:1999\u20132000 FA Cup .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the names of michael jackson 's kids", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Michael Jackson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Michael Jackson ns:people.person.children ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what movies have robert pattinson in them", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Robert Pattinson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Robert Pattinson ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what the time zone in japan", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Japan)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Japan ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who plays bob kelso in scrubs", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bob Kelso)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bob Kelso ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:Scrubs .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what race is vanessa carlton", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Vanessa Carlton)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Vanessa Carlton ns:people.person.ethnicity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what do people in czech republic speak", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Czech Republic)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Czech Republic ns:location.country.languages_spoken ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which countries speak arabic language", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Arabic Language)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Arabic Language ns:language.human_language.countries_spoken_in ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does tim cook work", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Tim Cook)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Tim Cook ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n?y ns:business.employment_tenure.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what degrees does romney have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Mitt Romney)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Mitt Romney ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is bob marley buried", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Bob Marley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Bob Marley ns:people.deceased_person.place_of_burial ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what is london uk time zone", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:London)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:London ns:location.location.time_zones ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where to stay in chicago tourist", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chicago)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chicago ns:travel.travel_destination.accommodation ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of breast cancer did sheryl crow have", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Sheryl Crow)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Sheryl Crow ns:medicine.notable_person_with_medical_condition.condition ?x .\n?x ns:medicine.disease.parent_disease ns:Cancer .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what type of government does argentina have today", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Argentina)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Argentina ns:location.country.form_of_government ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where does fabio capello come from", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Fabio Capello)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Fabio Capello ns:people.person.place_of_birth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what party was abe lincoln part of", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Abraham Lincoln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Abraham Lincoln ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what did jack london do for a living", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Jack London)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Jack London ns:people.person.profession ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who did morgan freeman marry", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Morgan Freeman)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Morgan Freeman ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:Marriage .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what are the mountains in northern italy called", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Apennine Mountains)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Apennine Mountains ns:type.object.name ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what influenced john steinbeck to start writing", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:John Steinbeck)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:John Steinbeck ns:influence.influence_node.influenced_by ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is dwayne johnson ethnicity", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Dwayne Johnson)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Dwayne Johnson ns:people.person.ethnicity ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where are the nato headquarters located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:North Atlantic Treaty Organization (NATO))\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:North Atlantic Treaty Organization (NATO) ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "in which state was the battle of antietam fought", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Battle of Antietam)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Battle of Antietam ns:time.event.locations ?x .\n?x ns:common.topic.notable_types ns:US State .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "which ocean does the zambezi river flow into", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Zambezi)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Zambezi ns:geography.river.mouth ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "what team did david beckham play for before la galaxy", "output": "SELECT DISTINCT ?x\nWHERE {\nfilter(?x != ns:m.01634x)\nns:David Beckham ns:sports.pro_athlete.teams ?z . #beckham\n?z ns:sports.sports_team_roster.team ns:m.01k2yr . #galaxy\n?z ns:sports.sports_team_roster.from ?from .\nns:David Beckham ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y  ns:sports.sports_team_roster.to ?to .\n}\nORDER BY ASC(xsd:datetime(?from))\nLIMIT 1"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "who is the current leader of france 2010", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:France)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:France ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:President .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"\"^^xsd:dateTime) })\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where was the palace of knossos located", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Knossos)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Knossos ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "where is roswell area 51", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Area 51)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Area 51 ns:location.location.containedby ?x .\n}\n"}, {"instruction": "Generate a SPARQL query that retrieves the information corresponding to the given question:", "input": "when was father chris riley born", "output": "SELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:Chris Riley)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:Chris Riley ns:people.person.place_of_birth ?x .\n}\n"}]